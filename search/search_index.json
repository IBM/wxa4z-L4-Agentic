{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Welcome to the IBM watsonx Assistant for Z for Technical Sales Level 4 Lab Guide (lab guide). The lab guide is part of the IBM watsonx Assistant for Z for Technical Sales Level 4 learning plan for IBM and Business Partner Technical Sales and related badge. The learning plan is intended to teach technical sellers and Business Partners how to conduct a proof of experience (PoX) for a client. </p> <p>In a fast-paced world, things change...</p> <p>The products and services may appear differently than what is shown in the lab guide. This can occur if the product or service is updated with a new version.</p> <p>Responses generated by IBM watsonx Assistant for Z are likely to change over time. The responses you see when you run the queries in this section may differ from the screen images captured in the lab guide. </p>"},{"location":"#prerequisite-knowledge","title":"Prerequisite knowledge","text":"<p>The prerequisite requirements to complete this course are as follows:</p> <ul> <li> <p>Basic Windows or Linux (MacOS) Operating System admin skills, including:</p> <ul> <li> <p>Open a command prompt or power shell on Windows, or a terminal window on Linux (MacOS)</p> </li> <li> <p>Change directories, create directories, and move directories</p> </li> <li> <p>Set environment variables and add directories to the default PATH</p> </li> <li> <p>Create and modify plain text files with an editor and save as plain text files</p> </li> <li> <p>Familiarity with a visual code editor like VS Studio Code is a plus</p> </li> </ul> </li> <li> <p>The following links may help with these basic skills. This is not an endorsement of the sources. Try searching the internet for related resources.    </p> <ul> <li> <p>Windows tutorials (and other videos in the series).</p> </li> <li> <p>Windows PowerShell.</p> </li> <li> <p>MacOS terminal.</p> </li> <li> <p>The 50 most popular Linux &amp; terminal commands - full course for beginners (based on the following book).</p> </li> <li> <p>The Linux Commands Handbook (Linux/MacOS).</p> </li> </ul> </li> </ul> <p>Read and follow all the directions.</p> <p>It is important to read and follow all the documented steps. Skipping steps or sections can cause issues with completing the lab.</p> <p>Also, invest a few minutes in reading the tips in the Using the demonstration guide section. The tips will save you time and frustration in completing the lab.</p>"},{"location":"#lab-overview","title":"Lab overview","text":"<p>This lab guide covers the setup, configuration, and usage of watsonx Assistant for Z. This lab guide uses the IBM watsonx Assistant for Z Velocity collection and the three Velocity Pilot lab environments in IBM Technology Zone (ITZ). </p> <p>The lab guide also enables dedicated lab environments for customized client PoXs and demonstrations. If you are preparing for an actual pilot engagement, refer to the Pilot Scoping Guide for watsonx Assistant for Z for additional information.</p> <p>Using the lab guide, you learn how to:</p> <ul> <li>Provision the lab environments</li> <li>Create an assistant and configuring conversational search</li> <li>Configure assistant settings</li> <li>Test conversational search</li> <li>Deploy a dedicated instance of OpenSearch for client document ingestion (Optional)</li> <li>Import skills for z/OS automations</li> <li>Connect apps to assistants</li> <li>Create assistant actions</li> <li>Create skill flows </li> <li>Publish and deploy an assistant</li> </ul> <p>In addition, you import pre-packaged z/OS skills and create custom-built skills to deliver an assistant that handles 3 use cases:</p> <ul> <li>Retrieving initial program load (IPL) information</li> <li>Managing certificates</li> <li>Resource Access Control Facility (RACF) administration support</li> </ul> <p>Not all capabilities of the offering are covered in the lab guide.</p> <p>This lab guide covers many features and capabilities of IBM Watson Assistant for Z, but not all. Some uncovered capabilities may be available in ITZ environments, while others may not, such as using skills for OMEGAMON.</p> <p></p>"},{"location":"#support","title":"Support","text":"<p>Think something is down? Check the applicable status pages for any known issues such as a site or service not being available:</p> <ul> <li>IBM Technology Zone status</li> </ul> <p>For issues with provisioning the ITZ environment for this lab (for example, a failed reservation request due to insufficient quota capacity), open a ticket with ITZ support:</p> <ul> <li> <p>Web:  IBM Technology Zone ticket system</p> </li> <li> <p>Email: techzone.help@ibm.com</p> </li> </ul> <p>For issues related to specific steps found in the demonstration guide after the ITZ environment is provisioned, contact the authors:</p> <ul> <li> <p>Slack: </p> </li> <li> <p>#watsonx-assistant-z-technical - IBM only</p> </li> <li> <p>#wxo-practitioners - IBM only - for questions that are related to the software as a service (SaaS) instance of watsonx Orchestrate</p> </li> <li> <p>Email: andrewj@us.ibm.com and maxwell.g.weiss@ibm.com</p> </li> </ul> <p>Business Partners, use the IBM Training live Chat Support service or other support methods that are found on the IBM Training portal here.</p>"},{"location":"#using-the-demonstration-guide","title":"Using the demonstration guide","text":"<p>Use these helpful tips to take full advantage of the IBM watsonx Assistant for Z for Technical Sales Level 4 Lab Guide.</p> Printing the demonstration guide <p>Printed or saved copies can be out of date</p> <p>The IBM watsonx Assistant for Z for Technical Sales Level 4 Lab Guide changes regularly to match the IBM watsonx Assistant for Z offering and associated ITZ environment. Printed or saved copies of the demonstration guide can become out-of-date quickly and result in failed steps. </p> <p>A ready-to-print PDF version of the IBM watsonx Assistant for Z for Technical Sales Level 4 Lab Guide is here. </p> <p></p> Create a reference card for storing user IDs, passwords, and links for your ITZ environments. <p>You will be creating and using multiple user IDs, passwords, links, and other content throughout the lab. To save time, it is strongly suggested you create a simple text file to store this data so it is readily available and you can easily cut and paste the data when needed.  Here is a template to get you started.</p> <pre><code>watsonx Assistant for Z - Level 4 shortcuts:\n\nwatsonx Orchestrate\n\n    IBM Cloud account: \n    IBM Cloud resources: https://cloud.ibm.com/resources\n    watsonx Orchestrate URL: \n\n    Assistant name: \n    Assistant description: \n    Assistant icon: https://ibm.github.io/SalesEnablement-L4-watsonx-AssistantForZ/Setup/_attachments/Zeeves75x75.png\n\nOpenShift\n\n    Cluster Admin Username: kubeadmin\n    Cluster Admin Password: \n    OCP Console: \n\n    IBM Cloud container entitlement key: \n\n    OS-secret password: \n    Client ingestion AuthKey: \n    Wrapper password: \n    Cluster domain for routes: \n    Ingestion route (append /v1/query): \n\nAnsible\n\n    Ansible Automation Platform URL: \n    AAP User Name: admin\n    AAP password:\n\n    Wazi User: IBMUSER\n    Wazi Password:\n    Wazi URL: \n\nLive Embed\n\n    inetegrationID:\n    region:\n    serviceInstanceID:\n</code></pre> Viewing images <p>Images in the demonstration guide can be enlarged by clicking on the image. Press the Esc key or click the X to dismiss the enlarged image.</p> <p></p> Image highlighting <p>In some images, the following styles of highlighting are used:</p> <ul> <li> <p>Solid highlight box: This style of box highlights where to click, enter, or select an item. </p> </li> <li> <p>Dash highlight box: This style of box highlights one of two things: the path to follow to get to a specific location in the user interface, or areas to explore on your own. </p> </li> </ul> Copying commands and prompts <p>Copying and pasting commands and prompts from this demonstration guide is easy and can eliminate typographical errors.</p> <p>Click the highlighted copy icon and then use your operating system's paste function. For example, Ctrl+V, or right-click and select <code>Paste</code>. </p> Acronyms and terminology <p>IBM employees and the tech industry in general, tend to use acronyms. In the demonstration guide, most acronyms will appear with a dashed underline. Hover over the acronym to learn its meaning. A question mark () icon will first appear and after a second the tool tip with the acronym's meaning is displayed. Try it here: LPAR. </p> <p></p> The Lab Guide table of contents <p>This Demonstration Guide uses a responsive browser-based interface to ensure pages are usable on various devices with different screen sizes. The Demonstration Guide table of contents may be displayed as highlighted in the green dashed box in this image:</p> <p></p> <p>However, if the browser window is sized smaller, the table of contents can be accessed by clicking the main menu icon ():</p> <p></p> <p>Click the main menu icon () to expand the table of contents.</p> <p>Continue to the Reserve the IBM Technology Zone environments section to begin the journey to obtain the IBM watsonx Assistant for Z Technical Sales Advanced badge.</p>"},{"location":"TechZoneEnvironment/","title":"Reserve the IBM Technology Zone environment","text":""},{"location":"TechZoneEnvironment/#ibm-technology-zone-environment","title":"IBM Technology Zone environment","text":"<p>To enable sellers to learn how to deliver client pilots of IBM watsonx Assistant for Z, three environments are available in IBM Technology Zone (ITZ). The environments are part of the watsonx Assistant for Z Velocity lab collection and can be found in the IBM watsonx Assistant for Z collection.</p> <ul> <li> <p>Watsonx Assistant for Z lab \u2013 watsonx Orchestrate: provides a dedicated environment on IBM Cloud where you can create and configure the assistant, set up conversational search, import skills, and configure actions.</p> </li> <li> <p>Ansible Automation Platform (AAP) &amp; z/OS: provides a pre-configured instance of AAP and Wazi z/OS. This environment includes Ansible playbooks, which you can import as skills within watsonx Orchestrate and connect to your assistant. Preinstalled templates for various use cases are also available (covered in later sections). Learn more about AAP here. Learn more about Wazi, here.</p> </li> <li> <p>Single Node OpenShift with NFS storage: provisions a single-node Red Hat OpenShift cluster (SNO) on IBM Cloud. This cluster installs a dedicated instance of OpenSearch for Watson Assistant for Z, enabling ingestion of client-supplied documents.- </p> </li> </ul> <p>All activities in this lab guide are required.</p> <p>To earn the IBM watsonx Assistant for Z Technical Sales Advanced badge and complete the Level 4 learning plan, you must provision all three ITZ environments and finish every section in the lab guide. Disregard any statements in the ITZ collection that suggest optional environments or tasks.</p> <p>Follow the instructions to create new reservation requests, extend the reservations, and access the ITZ demonstration environments. Provisioning the SNO environment in ITZ can take several hours, while the other two environments typically provisioning in under 30 minutes.</p>"},{"location":"TechZoneEnvironment/#create-a-reservation-request","title":"Create a reservation request","text":"<ol> <li> <p>Click each of the links that follow to open a browser to the reservation pages of the IBM watsonx Assistant for Z ITZ environments.</p> <p>You may be asked to authenticate to IBM Technology Zone.</p> <p>The steps to authenticate to ITZ are not detailed here as they may vary between users.</p> <p>Watsonx Assistant for Z lab \u2013 watsonx Orchestrate - reservation page</p> <p>Ansible Automation Platform (AAP) &amp; z/OS - reservation page</p> <p>Single Node OpenShift with NFS storage - reservation page</p> </li> </ol> <p>The next two steps are for one of the three environments. Repeat for all three environments.</p> <p>Follow the steps to create a reservation in ITZ for all three environments.</p> <ol> <li> <p>Select Reserve now.</p> <p>The Reserve now option creates a reservation for immediate use. Optionally, schedule the reservation for a later date, for example, when you are at your client's office to start a pilot.</p> <p></p> </li> <li> <p>Complete the reservation request form and then click Submit.</p> <p>The first two reservations are similar to the first image and have fields a-e that need to be completed.</p> <p>a. Name: specify a name for the reservation (optional).</p> <p>b. Purpose: select the Education purpose tile.</p> <p>For client pilots...</p> <p>For client pilots, set the Purpose field in the reservation to Pilot and provide an opportunity number to receive a longer reservation.</p> <p>c. Purpose description: enter a description, for example: Level 4 education.</p> <p>d. Preferred geography: select the region nearest to your physical location for improved performance and reduced network latency.</p> <p>e. End date and time: the initial maximum will be set to a specific number of days (typically two, but in somce cases longer) after the current date and time. Instructions follow to extend the reservation end date.</p> <p>f. Accept the IBM Technology Zone's terms and conditions and security policies.</p> <p>g. Click Submit.</p> <p></p> <p>In addition to the preceding fields, the reservation for the Single Node OpenShift with NFS storage has these additional fields:</p> <p>h. OCP/Kubernetes cluster network: leave the default setting of 10.128.0.0/14.</p> <p>i. Enable FIPS security: leave the default setting of No. Learn more about the Federal Information Processing Standards (FIPS) here.</p> <p>j. Master single node flavor: select 32 vCPU x 128 GB - 300 GB ephemeral storage.</p> <p>k. OpenShift version: select 4.14.</p> <p>l. OCP/Kubernetes service network: leave the default setting of 172.30.0.0/16.</p> <p>m. Accept the IBM Technology Zone's terms and conditions and security policies.</p> <p>n. Click Submit.</p> <p></p> </li> </ol> <p>During the provisioning process, multiple emails are sent to you from ITZ as the provisioning process runs. One email states the reservation is provisioning and the other email states that the environment is Ready.</p> <p>In rare cases, the provisioning process can fail. If you receive an email stating the reservation failed, try again by repeating Steps 1-3 for the environment that failed to provision. In addition, review the Troubleshooting section that follows. If issues continue, open an ITZ support ticket by using the methods that are mentioned in the Support section.</p>"},{"location":"TechZoneEnvironment/#extend-the-reservation","title":"Extend the reservation","text":"<p>When the reservations are in the Ready state, you can extend each reservation beyond its original end date. The duration of the extension will vary by reservation. </p> <ol> <li> <p>In the IBM Technology Zone portal, expand My TechZone and select My Reservations.</p> <p></p> </li> <li> <p>Click the overflow icon () on the reservation tile and select Extend.</p> <p></p> </li> </ol> <ol> <li> <p>Click the Select a date option, (a) specify the date to extend to, and then (b) click Extend.</p> <p></p> </li> </ol> <p>If you anticipate needing more time, repeat Steps 5-6 to extend the reservation to the maximum allowed. Repeat these steps for the other two reservations.</p>"},{"location":"TechZoneEnvironment/#join-the-itz-ibm-cloud-account","title":"Join the ITZ IBM Cloud account","text":"<p>Both the watsonx Assistant for Z lab \u2013 watsonx Orchestrate and the Ansible Automation Platform (AAP) &amp; z/OS environments add you to an IBM Cloud account while your reservation is active. During the provisioning process of these ITZ environments, you receive two emails from IBM Cloud. </p> <p>You only need to accept the invitation to the watsonx Assistant for Z lab \u2013 watsonx Orchestrate environment.</p> <ol> <li> <p>Open the email from IBM Cloud and click the Join now links.</p> <p></p> </li> <li> <p>In the Join IBM Cloud browser window that opens, select the I accept the product Terms and Conditions of the registration form, and then click Join Account.</p> <p></p> </li> </ol> <p>After joining the account, verify that the account appears in your available account list in the IBM Cloud portal.</p> <ol> <li> <p>Click the following link to open a browser to the IBM Cloud portal.</p> <p>IBM Cloud portal</p> </li> <li> <p>Follow the directions to complete the authentication to IBM Cloud using the same email address you used to login to ITZ. The login steps vary depending on any two-factor authentication methods enabled. </p> <p></p> </li> <li> <p>Click the account menu and verify access to the IBM Cloud account listed in your ITZ reservation.</p> <p>The account may be different.</p> <p>The account name should align with the account named in the invitation email you received. </p> <p></p> Does your IBM Cloud portal view look different? <p>If your IBM Cloud portal looks different from the images above, it could be because the IBM Cloud portal has gone through a design change, or your browser window is set to smaller size. Instead of the current selected account appearing in the top menu, you may see this change account icon: . Click this icon to view the list of accounts you can access.</p> <p></p> </li> </ol>"},{"location":"TechZoneEnvironment/#accessing-the-environments","title":"Accessing the environments","text":"<p>Each reservation provides access to its respective environment. Details for accessing each environment are provided in the Pilot setup sections that follow in the lab guide.</p> <p>After all three reservations are in the Ready state and you accept the invitations to the IBM Cloud accounts, proceed to the next section to complete the pilot setup.</p>"},{"location":"TechZoneEnvironment/#troubleshooting","title":"Troubleshooting","text":"If your reservation for the Single Node OpenShift environment fails... <p>If your reservation for the Single Node OpenShift environment fails, try selecting one of the eu-gb region options as the Preferred Geography. </p>"},{"location":"nav/","title":"Nav","text":"<ul> <li>Welcome</li> <li>Reserve the IBM Technology Zone environment</li> <li>TechZone Environment Reservations and Steps to Access<ul> <li>watsonx Orchestrate</li> <li>Single Node OpenShift cluster</li> <li>Ansible Automation Platform(AAP) &amp; z/OS</li> </ul> </li> <li>Deploy and configure zAssistantDeploy<ul> <li>Overview</li> <li>Install the oc CLI and log into OpenShift</li> <li>Install IBM Certificate Manager</li> <li>Install the watsonx Assistant for Z Operator</li> <li>Deploy secrets for OpenSearch and Client Ingestion</li> <li>Deploy zAssistantDeploy service</li> <li>Verify deployment and acquire OpenSearch connection details</li> </ul> </li> <li>Create an Assistant with zRAG documentation<ul> <li>Overview</li> <li>Access watsonx Orchestrate</li> <li>Create a zRAG Assistant</li> <li>Setup conversational search</li> <li>Configure settings for conv search</li> <li>Additional configuration</li> <li>Testing assistant's conv search capbilities</li> </ul> </li> <li>Ingest customer documentation<ul> <li>Overview</li> <li>Download and configure zAssist utility</li> <li>Create Service Credentials for IBM COS</li> <li>Log into COS via ibmcloud utility</li> <li>Create a storage bucket</li> <li>Upload docs to storage bucket</li> <li>Execute doc ingestion</li> <li>Test assistant Q&amp;A with ingested documents</li> </ul> </li> <li>Prepare watsonx.ai services for agent deployment<ul> <li>Create watsonx.ai Project</li> <li>Create Deployment Space</li> <li>Generate IBM Cloud API key</li> <li>Retrieve watsonx Orchestrate Service Instance URL</li> <li>Locate your WML Base URL</li> </ul> </li> <li>Execute agent deployment <ul> <li>Introduction to Agent Deployment</li> <li>Setup for Agent Deployment<ul> <li>Setup VS Code workspace</li> <li>Overview of the wxa4z-agent-suite Helm charts</li> </ul> </li> <li>Configure shared (global) agent variables</li> <li>Prepare for IBM Z Upgrade Agent<ul> <li>Summary of agent capabilities</li> <li>Configure the 'env' variables</li> <li>Configure the 'ptfJob' variables</li> <li>Configure the 'secrets.data' variables</li> <li>Configure the 'pvc' variable with storageClass</li> </ul> </li> <li>Prepare for IBM Z Support Agent<ul> <li>Summary of agent capabilities</li> <li>Configure the 'env' variables</li> <li>Configure the 'secrets.data' variables</li> </ul> </li> <li>Prepare for IBM Z OMEGAMON Insights Agent<ul> <li>Summary of agent capabilities</li> <li>Configure the 'env' variables</li> <li>Configure the secrets.data variables</li> <li>Configure the 'pvc' variable with storageClass</li> </ul> </li> <li>Execute Agent Deployment</li> <li>Access Agents and Test Demo Scenarios<ul> <li>Access your deployed agents</li> <li>Test the IBM Z Support Agent</li> <li>Test the IBM Z OMEGAMON Insights Agent</li> <li>Test the IBM Z Upgrade Agent</li> </ul> </li> <li>Embed Agent Chat in Web Page</li> </ul> </li> <li>Build your own agent using the Agent Development Kit (ADK)<ul> <li>Introduction to the Agent Development Kit (ADK)</li> <li>Installing and setting up ADK environment</li> <li>Configuring AAP and z/OS certificates</li> <li>Preparing VS Code workspace</li> <li>Creating a connection and configuring credentials</li> <li>Importing tools</li> <li>Deploy the agent</li> <li>Publish agent to 'Live' version</li> <li>Test agent execution flow</li> </ul> </li> </ul>"},{"location":"agentdeploy/Overview/","title":"Introduction to Agent Deployment","text":""},{"location":"agentdeploy/Overview/#overview-of-agent-deployment","title":"Overview of Agent Deployment","text":"<p>IBM watsonx Assistant for Z delivers the next level of productivity with Agentic AI, providing one place to build, manage and run all your agents. Agents are designed to understand user intent, collaborate, and provide comprehensive responses.</p> <p>With watsonx Assistant for Z, users have available a set of pre-built Z domain-specific agents that cover two categories:</p> <ul> <li> <p>Foundational Agents - enabled by default and covered by the IBM watsonx Assistant for Z entitlement</p> </li> <li> <p>Prebuilt IBM Z Product Agents - require separate product entitlements (e.g. Db2 for z/OS agent, IntelliMagic Agent for Z)</p> </li> </ul>"},{"location":"agentdeploy/Overview/#foundational-agents","title":"Foundational Agents","text":"<p>Foundational agents work together to collect all required information by leveraging integrated tools, and then provide a detailed and comprehensive answer to any query, enabling more informed decision making with limited human intervention.</p> <p>These agents are enabled by default and are available upon installing watsonx Assistant for Z. </p> <p>Below is a summary of the foundational agents that are available with the product:</p> Agent Description IBM Z Support Agent The Support Agent enables users to run Ansible playbooks through Ansible Automation Platform, triggered by user input. Supported playbooks include: collecting z/OS dumps from a specified z/OS address space, and transfering a dump to IBM Support. Additionally, the agent provides functionality to retrieve the status of initiated Ansible jobs and access job logs for monitoring and troubleshooting. IBM Z OMEGAMON Insights Agent The IBM Z OMEGAMON Insights Agent allows system programmers to access and analyze system data directly through the watsonx Assistant for Z chat interface. By leveraging OMEGAMON data, it delivers accurate insights that help streamline system monitoring and decision-making. IBM Z Upgrade Agent The IBM Z Upgrade Agent enables system programmers to perform z/OS upgrades through the watsonx Assistant for Z chat interface. It provies precise responses by leveraging z/OSMF APIs and client-specific documentation stored in the zRAG. IBM Z Automation Insights Agent The Automation Insights Agent allows system programmers to retrieve and analyze system data through the watsonx Assistant for Z chat interface. It delivers accurate insights by leveraging data from the Automation and NetView domains, helping users better understand system behavior and performance. IBM Z Workload Scheduler Insights Agent The Workload Schduler Insights Agent enables system programmers to access and analyze workload and engine-relatd information through the watsonx Assistant for Z chat interface. It helps users gain visibility into scheduling operations and system activity, supporting more informed decision-making and faster issue resolution."},{"location":"agentdeploy/Overview/#prebuilt-ibm-z-product-agents","title":"Prebuilt IBM Z Product Agents","text":"<p>The Prebuilt IBM Z Product Agents across various IBM Z software solutions simplify complex tasks and enhance productivity through natural language interactions. Together, these agents streamline operations, deliver actionable insights, and make mainframe technologies more accessible and user-friendly.</p> <p>These agents require separate product entitlements in order to deploy and run on the watsonx Assistant for Z platform, and can be enabled as needed, according to each agent\u2019s specific requirements.</p> <p>Below is a summary of the Pre-built IBM Z Product Agents:</p> Agent Description IBM CICS Transaction Server Agents for Z The CICS agent is capable of answering questions related to CICS topology and assisting with problem diagnosis by interpreting transaction error codes. It helps users understand the structure and relationships within the CICS environment and supports troubleshooting by providing insights based on specific error inputs. IBM Db2 for z/OS Agent The IBM Db2 for z/OS Agent is an AI-powered assistant that allows users to access real-time information about Db2 for z/OS subsystems and database objects through a prompt-driven conversational interface. For instance, you can ask about the current value of a subsystem parameter, identify which buffer pool an index uses, or check if any utilities are running on a subsystem. Along with delivering the requested information, the agent also explains the approach it used to derive the response IBM IMS Agents IBM IMS Agents software handles general queries related to IMS command syntax and formatting. It also provides real-time visibility into the operational status of IMS systems, helping accelerate troubleshooting by simplifying the diagnostic process. IBM IntelliMagic agent for Z A system designed to recommend relevant IBM Z IntelliMagic Vision for z/OS charts and reports based on a user-specified topic or issue. These visualizations deliver comprehensive insights into the IBM Z environment, covering both performance and configuration aspects. The recommended outputs may include health evaluations, exception notifications, performance indicators, and configuration data. The system spans key components such as Db2, CICS, IMS, FICON Directors, and Storage Systems. IBM Operations Agent for Z Monitors key system metrics\u2014including CPU usage, I/O activity, transaction volumes, response times, and storage availability. It identifies resource-heavy transactions and low-storage conditions, while tracking limits like MAXTASKS and concurrent transactions. Users gain visibility into active CICS regions, CICSPlexes, Sysplexes, LPARs, and workloads in z/OS environments. It provides Workload Management (WLM) analytics, covering transaction rates, response times, performance indexes, and goal achievement. Service classes missing objectives are flagged, and critical events are reported. Functional Testing Agent (TAZ) This AI-powered solution uses natural language inputs to automatically generate UI-driven functional test cases. By leveraging agentic AI, it transforms written requirements and manual test descriptions into executable Java Galasa tests. Integrated with Microsoft Visual Studio Code (VS Code), the tool enables users to explore transaction screen capabilities and seamlessly generate functional tests for them. <p>IMPORTANT</p> <p>For the purpose of this lab, the set of agents used for deployment will be scoped to the three following Foundational Agents:</p> <ul> <li>IBM Z Upgrade Agent</li> <li>IBM Z Support Agent</li> <li>IBM Z OMEGAMON Insights Agent.</li> </ul> <p>For details and guidance on deploying any of the other agents, make sure to reference the official IBM documentation.</p>"},{"location":"agentdeploy/configure-shared-variables/","title":"Configure shared (global) agent variables","text":""},{"location":"agentdeploy/configure-shared-variables/#configuring-shared-global-agent-variables","title":"Configuring Shared (Global) Agent variables","text":"<p>Within your <code>values.yaml</code> file of the wxa4z-agent-suite sub-folder, the first section of the file references <code>global</code> variables that get set first and are used by each of the agents.</p> <p>After the global variables there are sections for each of the agents with agent-specific variables that must be set. In this section you will configure the global variables section of your <code>values.yaml</code> file.</p> <p>ACTION: Within your VS Code window, click on the <code>values.yaml</code> file within the wxa4z-agent-suite sub-folder to open up the contents within VS Code.</p> <p></p> <p>This is the file that you will be modifying in the following sections to prepare for your agents\u2019 deployment. Ensure that you have the contents of this file opened within your VS Code window.</p>"},{"location":"agentdeploy/configure-shared-variables/#configuring-the-orchestrate_env_type-global-variable","title":"Configuring the <code>ORCHESTRATE_ENV_TYPE</code> global variable","text":"<p>At the very top of your <code>values.yaml</code> file, under global , there is a <code>secrets.data</code> section. You should see the first variable labeled <code>ORCHESTRATE_ENV_TYPE</code>:</p> <pre><code>secrets:\n  name: wxa4z-watsonx-credentials \n  data:\n    ORCHESTRATE_ENV_TYPE:\n    ...\n</code></pre> <p>This is the instance type of your watsonx Orchestrate environment. Set the value to <code>ibm_iam</code> (for IBM Cloud). It should look like the following:</p> <pre><code>secrets:\n  name: wxa4z-watsonx-credentials \n  data:\n    ORCHESTRATE_ENV_TYPE: ibm_iam\n    ...\n</code></pre>"},{"location":"agentdeploy/configure-shared-variables/#configuring-the-watsonx_api_key-global-variable","title":"Configuring the <code>WATSONX_API_KEY</code> global variable","text":"<p>Below the previous variable (also under <code>secrets.data</code>) there is a global variable labeled <code>WATSONX_API_KEY</code>.</p> <p><code>WATSONX_API_KEY: \u201c\u201d</code></p> <p>Within the double-quotes, copy and paste your unique API key that you generated in the IBM Cloud console and recorded during Section Generate IBM Cloud API key.</p>"},{"location":"agentdeploy/configure-shared-variables/#configuring-the-orchestrate_env_url-global-variable","title":"Configuring the <code>ORCHESTRATE_ENV_URL</code> global variable","text":"<p>Next you will see the <code>ORCHESTRATE_ENV_URL</code> variable under <code>secrets.data</code>. Within the double-quotes, copy and paste the value of your unique URL which you recorded in Section Retrieve watsonx Orchestrate Service Instance URL.</p>"},{"location":"agentdeploy/configure-shared-variables/#configuring-the-watsonx_deployment_space_id-global-variable","title":"Configuring the <code>WATSONX_DEPLOYMENT_SPACE_ID</code> global variable","text":"<p>For the <code>WATSONX_DEPLOYMENT_SPACE_ID</code> global variable,copy and paste your unique Deployment Space ID within the double-quotes, which you recorded in Section Create Deployment Space.</p>"},{"location":"agentdeploy/configure-shared-variables/#configuring-the-watsonx_ml_url-global-variable","title":"Configuring the <code>WATSONX_ML_URL</code> global variable","text":"<p>For the <code>WATSONX_ML_URL</code> global variable, copy and paste the value for your environment which you recorded in Section Locate your WML Base URL.</p>"},{"location":"agentdeploy/configure-shared-variables/#configuring-the-watsonx_project_id-global-variable","title":"Configuring the <code>WATSONX_PROJECT_ID</code> global variable","text":"<p>Finally, for the <code>WATSONX_PROJECT_ID</code> global variable,copy and paste your unique Project ID that you recorded in Section Create watsonx.ai Project.</p>"},{"location":"agentdeploy/configure-shared-variables/#setting-your-registry-entitlement-key-for-wxa4z-for-foundational-agents","title":"Setting your registry entitlement key for wxa4z (for foundational agents)","text":"<p>After setting the above global variables within the <code>secrets.data</code> section of the <code>values.yaml</code> file, the last global secret to set is the registry image pull secret that will be used for pulling the images for the foundational agents. It should look like this by default under the <code>global</code> variables section:</p> <pre><code>registry:\n    name: wxa4z-image-pull-secret \n    createSecret: true\n    server: cp.icr.io\n    username: cp \n    entitlementKey: \u201c\u201d\n</code></pre> <p>For the <code>entitlementKey</code> parameter, copy and paste the entitlement key you used in Section Install the watsonx Assistant for Z Operator.</p> <p>If you forget your entitlement key</p> <p>In the case that you don't remember the entitlement key you used and you need to generate a new one, follow these steps:</p> <ol> <li> <p>Access the entitlement keys page here.</p> </li> <li> <p>Locate your existing entitlement key and click copy.</p> </li> </ol>"},{"location":"agentdeploy/configure-shared-variables/#set-catrustsyncenabled-to-false","title":"Set <code>caTrustSync.enabled</code> to <code>false</code>","text":"<p>Following the <code>global</code> settings/variables section, you will see a <code>caTrustSync</code> section as shown below:</p> <p></p><pre><code>caTrustSync:\n  enabled: true\n  # Namespace containing the target Deployment &amp; Pods (merged secret is created here)\n  targetNamespace: cpd-instance-1\n  # Target Deployment and the EXACT container name to exec into\n  targetDeployment: wo-conversation-controller\n  targetContainer: wo-conversation-controller\n</code></pre> By default, <code>enabled</code> is set to <code>true</code>. As you are not using an on-prem version of Watsonx Orchestrate for the Lab, this can be set to <code>false</code> instead of configuring an internal CA certificate. <p>Set the <code>enabled</code> parameter value to <code>false</code> as shown below:</p> <pre><code>caTrustSync:\n  enabled: false\n  # Namespace containing the target Deployment &amp; Pods (merged secret is created here)\n  targetNamespace: cpd-instance-1\n  # Target Deployment and the EXACT container name to exec into\n  targetDeployment: wo-conversation-controller\n  targetContainer: wo-conversation-controller\n</code></pre>"},{"location":"agentdeploy/configure-shared-variables/#disable-foundational-agents-not-in-scope","title":"Disable foundational agents not in scope","text":"<p>Before proceeding with the agent setup and deployment, you will need to disable the agents that aren\u2019t in scope for this lab. Each agent in the suite can be customized individually in the <code>wxa4z-agent-suite/values.yaml</code> file. Settings differ slightly for Foundational Agents versus IBM z/OS Product Agents.</p> <p>Configuration for Foundational Agents:</p> <ul> <li>enabled by default</li> <li>only requires <code>enabled: true</code> within the agent's particular section of <code>values.yaml</code></li> </ul> <p>For example:</p> <pre><code>support-agent:\n  enabled: true\n  # additional agent-specific config...\n</code></pre> <p>Configuration for Foundational Agents:</p> <ul> <li>not enabled by default</li> <li>to enable each agent, user must set <code>enabled: true</code> and <code>acceptLicense: true</code>, as well as provide a unique entitlement key for that particular Product Agent. </li> </ul> <p>NOTE: For this lab, you will only be deploying three of the Foundational Agents:</p> <ul> <li>IBM Z Upgrade Agent</li> <li>IBM Z Support Agent</li> <li>IBM Z OMEGAMON Insights Agent</li> </ul> <p>As mentioned above, the Prebuilt IBM Z Product Agents are disabled by default, while the Foundational Agents are enabled by default. For the purpose of this lab, you will need to disable the following Foundational Agents:</p> <ul> <li>IBM Z Automation Insights Agent</li> <li>IBM Z Workload Scheduler Insights Agent</li> </ul> <ol> <li> <p>Within your <code>values.yaml</code> file within the <code>wxa4z-agent-suite</code> sub-folder, scroll through the file until you get to the first Default agent.</p> <p>For example:</p> <pre><code># Default: support-agent\nsupport-agent:\n  enabled: true\n  image:\n    # additional agent-specific config...\n</code></pre> <p>For the purpose of this Lab, you are deploying the IBM Z Support Agent, so you can leave <code>enabled</code> set to <code>true</code> by default. </p> </li> <li> <p>Scroll down to the next Default agent section, which should be for the IBM Z OMEGAMON Insights Agent, as shown below:</p> <pre><code># Default: omegamon-insights-agent\nomegamon-insights-agent:\n  enabled: true\n  image:\n    # additional agent-specific config...\n</code></pre> <p>You can also leave <code>enabled</code> set to <code>true</code> as you will be deploying this agent.</p> </li> <li> <p>Scrolling down further, you will next see the section for the IBM Z Automation Insights Agent, as shown below:</p> <pre><code># Default: automation-insights-agent\nautomation-insights-agent:\n  enabled: true\n  image:\n    # additional agent-specific config...\n</code></pre> <p>As you will not be deploying this agent for the Lab, you will need to disable the agent by setting <code>enabled</code> to <code>false</code> as shown below:</p> <pre><code># Default: automation-insights-agent\nautomation-insights-agent:\n  enabled: false\n  image:\n    # additional agent-specific config...\n</code></pre> </li> <li> <p>The next agent is for the IBM Z Upgrade Agent. Leave the default with <code>enabled</code> set to <code>true</code>. </p> <pre><code># Default: upgrade-agent\nupgrade-agent:\n  enabled: true\n  image:\n    # additional agent-specific config...\n</code></pre> </li> <li> <p>Finally, scrolling to the last Default agent is the IBM Z Workload Scheduler Insights Agent. Make sure to set <code>enabled</code> to <code>false</code> as shown below:</p> <pre><code># Default: workload-scheduler-agent-z\nworkload-scheduler-agent-z:\n  enabled: false\n  image:\n    # additional agent-specific config...\n</code></pre> </li> </ol>"},{"location":"agentdeploy/embed/","title":"placeholder","text":""},{"location":"agentdeploy/execute-deploy/","title":"Execute Agent Deployment","text":""},{"location":"agentdeploy/execute-deploy/#execute-agent-deployment","title":"Execute Agent Deployment","text":"<p>Now that you\u2019ve set the required <code>global</code> (shared) agent variables and set the relevant agent-specific variables, you are ready to execute the deployment of the scoped agent set onto your OpenShift cluster. As part of the deployment process, the agents will be automatically bootstrapped to your watsonx Orchestrate environment so the agents will appear by default when you log in. As a recap, the agents you will deploy for this lab include:</p> <ul> <li>IBM Z Upgrade Agent</li> <li>IBM Z Support Agent</li> <li>IBM Z OMEGAMON Insights Agent</li> </ul> <ol> <li> <p>Within VS Code, open up a new terminal window by clicking on Terminal --&gt; New Terminal. </p> <p>For example (on Mac):</p> <p>IMAGE</p> </li> <li> <p>With the terminal window open, ensure your terminal\u2019s current working directory is the <code>wxa4z-agent-suite</code> folder that you extracted from Box. See screenshot below as an example:</p> <p>IMAGE</p> </li> <li> <p>Download and install the <code>helm</code> command-line utility by following the instructions in the link below:</p> <p>https://helm.sh/docs/intro/install/</p> </li> <li> <p>Verify that <code>helm</code> was successfully installed by running the following command in your VS Code terminal:</p> <p><code>helm --help</code></p> </li> <li> <p>Within the terminal session, run the following command to deploy the agents:</p> <p><code>helm upgrade --install wxa4z-agent-suite . -n wxa4z-zad -f ./values.yaml - -wait</code></p> </li> <li> <p>After executing the above command, you should see something like the following:</p> <p>IMAGE</p> <p>What is the command doing?</p> <p>The above command will deploy all of the <code>enabled</code> agents simultaneously. </p> <p>Because the <code>--wait</code> flag was used, the command won't return until all the required agent images are pulled successfully.</p> </li> <li> <p>Ensure there are no immediate errors in the command output. Once complete, you may see a message returned like the following:</p> <p>IMAGE</p> </li> </ol>"},{"location":"agentdeploy/execute-deploy/#verify-successful-deployment","title":"Verify successful deployment","text":"<ol> <li> <p>To verify the successful deployment of your agents, navigate back to your OCP Web console and log in.</p> </li> <li> <p>Once logged in, navigate to Workloads --&gt; Pods within the wxa4z-zad namespace and verify that you see the 3 new pods (one for each agent), and that they\u2019re in the Running status:</p> <p>IMAGE</p> <p>NOTE:* you may also see pods with the bootstrap* label. These are ephemeral pods used to register each of the agents to your Orchestrate environment. Once the bootstrapping job is completed, these pods will terminate on their own.</p> </li> </ol> <p>Congratulations! You\u2019ve successfully deployed your first set of watsonx Assistant for Z agents. In the following section you will access and test each of the agents capabilities.</p>"},{"location":"agentdeploy/execute-deploy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agentdeploy/setup/","title":"Setup VS Code workspace","text":""},{"location":"agentdeploy/setup/#setup-vs-code-workspace-with-the-wxa4z-agent-suite-helm-charts","title":"Setup VS Code workspace with the wxa4z-agent-suite Helm Charts","text":"<p>In this section you will setup your VS Code workspace with the IBM watsonx Assistant for Z - Agent Suite Helm Charts that you will later deploy onto your cluster. The helm chart deploys multiple z/OS agents with a single command, using shared configuration and per-agent overrides. In the following section you will see how the Agent suite works.</p> <ol> <li> <p>The very first step in configuring the Agent Suite is to firstly download the z-ai-agents.zip file to your local workstation, which contains the Agent Suite Helm Charts.</p> <p>Navigate to the below link and download the provided .zip file from Box to your local workstation:</p> <p>https://ibm.box.com/s/6s6khnvokxq1mxiw9bjzhqg6mcrikbo8</p> <p>Guidance on the agent suite</p> <p>The  Agent Suite Helm Charts are made publicly available to customers via the Git repo found here.</p> <p>This public git repo hosts only the Agent Deployment Guide, and not the agents themselves, as a valid entitlement key must be obtained before agents can be properly deployed.</p> <p>For the purpose of the lab, the provided Helm charts are available to download from the Box link above, and have been slightly modified for quicker deployment.</p> </li> <li> <p>After downloading the .zip file, unzip or extract the file to your local workstation.</p> </li> <li> <p>Once extracted, open up a new VS Code session (if not already open), and open your extracted z-ai-agents folder on your local workstation.</p> <ul> <li> <p>If opening a new VS code window, this can be done by clicking Open Folder</p> <p></p> </li> <li> <p>If using an existing VS code window, you can go to File --&gt; Open Folder...</p> <p></p> </li> </ul> </li> <li> <p>Then select your extracted z-ai-agents folder to access the folder in your VS Code window.</p> <p></p> </li> </ol>"},{"location":"agentdeploy/wxa4z-agent-suite/","title":"Overview of the wxa4z-agent-suite Helm charts","text":""},{"location":"agentdeploy/wxa4z-agent-suite/#overview-of-the-wxa4z-agent-suite-helm-charts","title":"Overview of the wxa4z-agent-suite Helm Charts","text":"<p>Now, within the Explorer view of VS Code, expand the wxa4z-agent-suite sub-folder. You should see the agent suite structure as shown below:</p> <p>IMAGE</p> <p>The wxa4z-agent-suite chart deploys a suite of z/OS agents with one command. Each agent remains an independent chart (own values, templates, and versioning) while the umbrella coordinates:</p> <ul> <li>Single-command install/upgrade for all enabled agents</li> <li>Shared, reusable config &amp; secrets (optional, via <code>global.*</code>)</li> </ul> <p>And below you can find a quick description of the repo layout: </p><pre><code>wxa4z-agent-suite/ # &lt;\u2014 umbrella chart\n\u251c\u2500 Chart.yaml # lists all agent dependencies\n\u251c\u2500 values.yaml # toggles &amp; optional shared config/secrets\n\u251c\u2500 templates/ # (usually minimal; e.g., optional global secrets) \u2514\u2500 charts/ # populated by helm dependency update\n</code></pre> <p>The <code>wxa4z-agent-suite/values.yaml</code> file is the file you will be modifying to configure your agents deployment. The steps taken in later sections include:</p> <ul> <li>Configuring the agents\u2019 global settings (created once, used everywhere)</li> <li>Setting your registry entitlement key for foundational agents</li> <li>Disabling foundational agents not in scope of lab</li> <li>Configuring agent-specific values for each respective agent in scope for the lab deployment:<ul> <li>IBM Z Upgrade Agent</li> <li>IBM Z Support Agent</li> <li>IBM Z OMEGAMON Insights Agent</li> </ul> </li> <li>Execute deployment via single <code>helm</code> command</li> <li>Verify agents\u2019 deployment status</li> </ul>"},{"location":"agentdeploy/omegamon-agent/env/","title":"Configure the 'env' variables","text":""},{"location":"agentdeploy/omegamon-agent/env/#configuring-the-env-variables","title":"Configuring the <code>env</code> variables","text":"<p>Within your <code>values.yaml</code> file, locate the section for the IBM Z OMEGAMON Insights Agent as shown below:</p> <pre><code># ---------------------------------------------------------------------------- #\n# Default: omegamon-insights-agent\n# ---------------------------------------------------------------------------- #\nomegamon-insights-agent:\n  enabled: true\n  image:\n    # additional agent-specific config....\n</code></pre> <p>Within this agent\u2019s section of <code>values.yaml</code> scroll down to the <code>env</code> variable section which by default should look like what\u2019s shown below:</p> <pre><code>env:\n  DEPLOYMENT_TYPE:\n</code></pre> <p>Below is a brief summary of this variable. Keep the default value of \"cloud\" set for this variable as you will be accessing this external agent from WxO SaaS.</p> Variable name Description Default value to set DEPLOYMENT_TYPE Type of deployment (options include 'on-prem' and 'cloud') \"cloud\" <p>ACTION: set the above variable to the default value in your values.yaml file under the \u2018omegamon-insighst- agent\u2019 section (in the env variables section)</p>"},{"location":"agentdeploy/omegamon-agent/overview/","title":"Summary of agent capabilities","text":""},{"location":"agentdeploy/omegamon-agent/overview/#summary-of-ibm-z-omegamon-insights-agent-capabilities","title":"Summary of IBM Z OMEGAMON Insights Agent capabilities","text":"<p>The IBM Z OMEGAMON Insights Agent enables system programmers to retrieve and analyze system information through the watsonx Assistant for Z chat interface. It provides accurate insights by leveraging OMEGAMON data.</p> <p>Below is a summary of the agent capabilities:</p> Agent capbility Description Retrieves Db2 subsystem details Type of deployment (options include 'on-prem' and 'cloud') Retrieves IMS system details Name of AAP Template used for gathering/collecting dumps Retrieves JVM system information Name of AAP Template used for sending/transferring dumps to IBM Support Retrieves LPAR system details Name of AAP Template used for sending/transferring dumps to IBM Support Retrieves network details Name of AAP Template used for sending/transferring dumps to IBM Support Retrieves storage information Name of AAP Template used for sending/transferring dumps to IBM Support Retrieves CICSplex and CICS region details Name of AAP Template used for sending/transferring dumps to IBM Support Retrieves MQ subsystem details Name of AAP Template used for sending/transferring dumps to IBM Support Retrieves OMEGAMON events Name of AAP Template used for sending/transferring dumps to IBM Support"},{"location":"agentdeploy/omegamon-agent/pvc/","title":"Configure the 'pvc' variable with storageClass","text":""},{"location":"agentdeploy/omegamon-agent/pvc/#configuring-the-pvcstorageclass-variable","title":"Configuring the <code>pvc.storageClass</code> variable","text":"<p>Scrolling to the end of the omegamon-insights-agent section of <code>values.yaml</code>, you should see the <code>pvc</code> section as shown below: </p><pre><code>pvc:\n  storageClass: \"ocs-storagecluster-cephfs\"\n</code></pre> <p>Set the value of the <code>storageClass</code> variable to your cluster's storage class: <code>managed-nfs-storage</code>.</p> <p>After doing so, the result should look like the following:</p> <pre><code>pvc:\n  storageClass: \"managed-nfs-storage\"\n</code></pre>"},{"location":"agentdeploy/omegamon-agent/secrets-data/","title":"Configure the secrets.data variables","text":""},{"location":"agentdeploy/omegamon-agent/secrets-data/#configuring-the-secretsdata-variables","title":"Configuring the <code>secrets.data</code> variables","text":"<p>Scrolling down further in the IBM Z OMEGAMON Insights Agent section of your <code>values.yaml</code> file, you will see a <code>secrets.data</code> section with additional variables you must configure. It will look like what\u2019s shown below:</p> <pre><code>secrets:\n  data:\n    AIOPS_BASE_URL: \"\"\n    AIOPS_TOKEN: \"\"\n    AGENT_AUTH_TOKEN: \"\"\n</code></pre> <p>The below table provides a summary of each of those variables that must be set, some of which you can use the corresponding default values for. For the first two variables, you will need to get the appropriate values to use from the instructor.</p> Variable name Description Default value to set AIOPS_BASE_URL Base URL of the zChatOps server instance ask instructor AIOPS_TOKEN Bearer token for the ZChatOps server ask instructor AGENT_AUTH_TOKEN Password for logging into your AAP Web console agent_auth_token"},{"location":"agentdeploy/support-agent/env/","title":"Configure the 'env' variables","text":""},{"location":"agentdeploy/support-agent/env/#configuring-the-env-variables","title":"Configuring the <code>env</code> variables","text":"<p>Within your <code>values.yaml</code> file, locate the section for the IBM Z Support Agent as shown below:</p> <pre><code># ---------------------------------------------------------------------------- #\n# Default: support-agent\n# ---------------------------------------------------------------------------- #\nsupport-agent:\n  enabled: true\n  image:\n    # additional agent-specific config....\n</code></pre> <p>Within this agent\u2019s section of <code>values.yaml</code> scroll down to the <code>env</code> variable section which by default should look like what\u2019s shown below:</p> <pre><code>env:\n  DEPLOYMENT_TYPE:\n  TAKE_DUMP_JOB_TEMPLATE: \"\"\n  SEND_DUMP_JOB_TEMPLATE: \"\"\n</code></pre> <p>The below table describes each of the variables in the <code>env</code> variables section.</p> Variable name Description Default value to set DEPLOYMENT_TYPE Type of deployment (options include 'on-prem' and 'cloud') \"cloud\" TAKE_DUMP_JOB_TEMPLATE Name of AAP Template used for gathering/collecting dumps \"Collect dump\" SEND_DUMP_JOB_TEMPLATE Name of AAP Template used for sending/transferring dumps to IBM Support \"Send dump\" <p>NOTE: because you are using a pre-configured instance of AAP/Wazi aaS, the required template names are hard-coded. </p> <p>Set the above default values in your <code>values.yaml</code> file under the <code>env</code> variables section. The result should look like the following:</p> <pre><code>env:\n  DEPLOYMENT_TYPE: \"cloud\"\n  TAKE_DUMP_JOB_TEMPLATE: \"Collect dump\"\n  SEND_DUMP_JOB_TEMPLATE: \"Send dump\"\n</code></pre>"},{"location":"agentdeploy/support-agent/overview/","title":"Summary of agent capabilities","text":""},{"location":"agentdeploy/support-agent/overview/#summary-of-agent-capbilities","title":"Summary of Agent Capbilities","text":"<p>The IBM Z Support Agent enables users to run Ansible playbooks through Ansible Automation Platform, triggered by user input. </p> <p>Supported playbooks include:</p> <ul> <li>Take z/OS Dump: Collects a dump from a specified z/OS address space</li> <li>z/OS Send Dump: Collects and transfers a dump from a z/OS address space to a Support Ticket</li> </ul> <p>Additionally, the agent provides functionality to retrieve the status of initiated Ansible jobs and access job logs for monitoring and troubleshooting.</p> <p>Below is a summary of the agent capabilities:</p> Agent capbility Description Take z/OS dump Collect dump on a z/OS address space Send z/OS dump Transfer the dump collected on z/OS address space Retrieve job status Retrieve the launched ansible job status and logs"},{"location":"agentdeploy/support-agent/secrets-data/","title":"Configure the 'secrets.data' variables","text":""},{"location":"agentdeploy/support-agent/secrets-data/#configuring-the-secretsdata-variables","title":"Configuring the <code>secrets.data</code> variables","text":"<p>Scrolling down further in the IBM Z Support Agent section of your <code>values.yaml</code> file, you will see a <code>secrets.data</code> section with additional variables you must configure. It will look like what\u2019s shown below:</p> <pre><code>secrets:\n  data:\n    AAP_ENDPOINT: \"\"\n    AAP_USERNAME: \"\"\n    AAP_PASSWORD: \"\"\n    SEND_DUMP_TRANSFER_ID: \"\"\n    SEND_DUMP_TRANSFER_PASSWORD: \"\"\n    AGENT_AUTH_TOKEN: \"\"\n</code></pre> <p>The below table describes each of the variables in the <code>secrets.data</code> variables section. The rows with default values can be set to what's shown in the <code>Default value to set</code> column. The rows without default values are unique to your environment and will require you to set that value using the instructions below in this section. </p> Variable name Description Default value to set AAP_ENDPOINT URL of your AAP instance to login to the AAP web console. ------- AAP_USERNAME Username for logging into your AAP Web console \"admin\" AAP_PASSWORD Password for logging into your AAP Web console ------- SEND_DUMP_TRANSFER_ID Transfer ID required for send dump job ------- SEND_DUMP_TRANSFER_PASSWORD Transfer password required for send dump job ------- AGENT_AUTH_TOKEN Authentication token used to register the agent with WxO \"support_auth_token\" <ol> <li> <p>Set the default variable values for the rows above in your <code>values.yaml</code> file:</p> <ul> <li><code>AAP_USERNAME: \"admin\"</code></li> <li><code>AGENT_AUTH_TOKEN: \"support_auth_token\"</code></li> </ul> </li> <li> <p>Set the <code>AAP_ENDPOINT</code> variable to your AAP UI URL used for logging into the AAP web console. This can be retrieved from your environment details as shown below:</p> <p>IMAGE</p> </li> <li> <p>Set the <code>AAP_PASSWORD</code> variable to your AAP User Password used for logging into the AAP web console. This can be retrieved from your environment details as shown below:</p> </li> </ol> <p>IMAGE</p> <ol> <li> <p>To generate the values for the <code>SEND_DUMP_TRANSFER_ID</code> and <code>SEND_DUMP_TRANSFER_PASSWORD</code>, you must first create a new IBM Support File Transfer ID on EcuRep. </p> <p>Follow the steps below to create and record your transfer ID credentials. </p> <ul> <li> <p>Create a new IBM Support File Transfer ID on ECuRep by accessing the link below: https://www.ecurep.ibm.com/transferids/</p> </li> <li> <p>Once authenticated, click on + Generate a new transfer ID</p> <p>IMAGE</p> </li> <li> <p>You will then be provided a Transfer ID and Password. The password will only be shown once, so make sure to record both details in a local notepad.</p> </li> <li> <p>In your <code>values.yaml</code> file under the <code>env</code> variables section, set the value of the <code>SEND_DUMP_TRANSFER_ID</code> variable to your recorded TransferID, and set the value of the <code>SEND_DUMP_TRANSFER_PASSWORD</code> variable to your recorded Transfer Password.</p> </li> </ul> </li> </ol> <p>Once you\u2019ve modified the above variables for the IBM Z Support Agent, make sure to save your <code>values.yaml</code> file to ensure the changes get saved.</p> <p>Finally, you will proceed to setting up the needed variables for the IBM Z OMEGAMON Insights Agent.</p>"},{"location":"agentdeploy/upgrade-agent/env/","title":"Configure the 'env' variables","text":""},{"location":"agentdeploy/upgrade-agent/env/#configuring-the-env-variables","title":"Configuring the <code>env</code> variables","text":"<p>Within your <code>values.yaml</code> file, locate the section for the IBM Z Upgrade Agent as shown below:</p> <pre><code># ---------------------------------------------------------------------------- #\n# Default: upgrade-agent\n# ---------------------------------------------------------------------------- #\nupgrade-agent:\n  enabled: true\n  image:\n    # additional agent-specific config....\n</code></pre> <p>Within this agent\u2019s section of <code>values.yaml</code> scroll down to the <code>env</code> variable section which by default should look like what\u2019s shown below:</p> <pre><code>env:\n  DEPLOYMENT_TYPE:\n  WRAPPER_URL: \"\"\n  HOST_NAME: \"\"\n  PDS_NAME: \"\"\n  INGESTION_URL: \"\"\n</code></pre> <p>You will now configure these <code>env</code> variables, using some defaults, as well as your environment-specific values.</p> <p>The below table describes each of the variables in the <code>env</code> variables section. The rows with default values can be set to what's shown in the <code>Default value to set</code> column. The rows without default values are unqiue to your environment and will require you to set that value using the instructions below in this section. </p> Variable name Description Default value to set DEPLOYMENT_TYPE Type of deployment (options include 'on-prem' and 'cloud') \"cloud\" WRAPPER_URL Wrapper URL for OpenSearch deployment. ------- HOST_NAME Endpoint of the cluster in which the agent is deployed ------- PDS_NAME Name of PDS dataset to be used for storing REXX scripts \"IBMUSER.REXX\" INGESTION_URL URL endpoint of the client ingestion service used for ingesting required agent documents ------- <ol> <li> <p>Set the default variable values for the rows above in your <code>values.yaml</code> file:</p> <ul> <li><code>DEPLOYMENT_TYPE: \"cloud\"</code></li> <li><code>PDS_NAME: \"IBMUSER.REXX\"</code></li> </ul> </li> <li> <p>Set the <code>WRAPPER_URL</code> variable to the URL endpoint of the your OpenSearch wrapper deployment you recorded in Section Verify deployment and acquire OpenSearch connection details.</p> <p>This can also be found by....</p> <p>This can also be found by logging into the OCP Web console, navigating to Networking --&gt; Routes, and then copying the route location of the <code>wxa4z-opensearch-wrapper</code> route (appending <code>/v1/query</code> to it).</p> <p>An example URL looks like the following: <code>https://wxa4z-opensearch-wrapper-wxa4z- zad.apps.68b1c328e1b1c3e282ce4781.eu1.techzone.ibm.com/v1/query</code></p> </li> <li> <p>Set the <code>HOST_NAME</code> variable to the clusterDomain value you recorded and set in your <code>deploy-zad.yaml</code> file in Section Deploy zAssistantDeploy service.</p> <p>This can also be found by....</p> <p>This can also be retrieved again by running the following command:</p> <p><code>oc -n openshift-ingress-operator get ingresscontroller default -o jsonpath=\"{.status.domain}\"</code></p> </li> <li> <p>Set the <code>INGESTION_URL</code> variable to the Server URL of your Client Ingestion Server that you recorded in Section Execute doc ingestion.</p> <p>This can also be found by....</p> <p>This can also be retrieved by logging into the OCP Web console, navigating to Networking --&gt; Routes, and then copying the route location of the <code>wxa4z-client-ingestion</code> route. </p> </li> </ol>"},{"location":"agentdeploy/upgrade-agent/overview/","title":"Summary of agent capabilities","text":""},{"location":"agentdeploy/upgrade-agent/overview/#summary-of-ibm-z-upgrade-agent-capabilities","title":"Summary of IBM Z Upgrade Agent capabilities","text":"<p>The IBM Z Upgrade Agent enables system programmers to perform z/OS upgrades through the watsonx Assistant for Z chat interface. It provides precise responses by leveraging z/OSMF APIs and client-specific documentation stored in the zRAG.</p> <p>Below is a summary of the agent capabilities.</p> Agent capbility Description List software products Provides a comprehensive list of software products for a given system List software instance details Shows detailed metadata of a given software instance such as its Name, Description, Global Zone, Target Zone, and so on Retrieve missing FIXCATs by software instance Retrieve missing FIXCATs by software product Identifies missing FXCAT Updates for specific software instances and systems. Acquire missing FIXCAT updates Retrieves the required PTFs for the specified RESOLVERS or FIXCAT names. Monitor PTF Acquisition status Tracks the progress and current status of background jobs initiated to acquire PTFs. Install the acquired PTFs Begins the installation or update process for the requested PTFs. Retrieve the installation or update status Retrieves the status of installation or update processes using either the process ID or the names of the software instance and system. Display HOLD data Shows HOLD data related to any unresolved HOLDS. Resume installation or update process Continues the installation or update process if the user agrees to resolve all unresolved HOLDS. Cancel the installation or update process Cancels the installation or update process only upon user request. Check hardware-compatibility for upgrade Performs a check if the given system's hardware is compatible for an upgrade to a specified version Retrieve content from agent documentation stored in zRAG Answers the upgrade workflow-related queries using the ingested docs for the agent."},{"location":"agentdeploy/upgrade-agent/ptfJob/","title":"Configure the 'ptfJob' variables","text":""},{"location":"agentdeploy/upgrade-agent/ptfJob/#configuring-the-ptfjob-variables","title":"Configuring the <code>ptfJob</code> variables","text":"<p>Once you\u2019ve set the values for the <code>env</code> variables in the IBM Z Upgrade Agent section of your <code>values.yaml</code> file, scroll down to the <code>ptfJob</code> variable section directly following it.</p> <p>Below is a summary of each of the referenced variables within the <code>ptfJob</code> variable section.</p> <p>Note: for this section, you can copy and paste each of the defaults provided below.</p> Variable name Description Default value to set SMPNTS Directory where z/OS SMP/E stores downloaded software packages \"/u/smpe\" SMPWDIR_PATH Temporary workspace used during SMP/E operations - i.e. RECEIVE, APPLY, ACCEPT, Internet-based orders (RECEIVE ORDER) \"/u/smpwkdir\" SMPJHOME Java SDK home directory used by SMP/E invoke Java-based services \"/usr/lpp/java/java8/J8.0_64\" SMPCPATH USS path to your internet configuration file, used during RECEIVE ORDER or other SMP/E operations that require internet access \"/usr/lpp/smp/classes\" ORDER_SERVER_URL URL of the IBM Enhanced Customer Center (ECC) gateway or other SMP/E order server used in RECEIVE ORDER operations \"https://eccgw01.boulder.ibm.com/services/projects/ecc/ws/\" KEYRING Name of RACF keyring where the SMP/E certificate is stored \"IBMUSER/SMPERING\" CERT_NAME Certificate label in keyring which is used in SMP/E operations to establish SSL/TLS secure connections \"SMPE Client Certificate\" DOWNLOAD_METHOD Download method for your environment configuration. Options include https, ftp, or sftp \"https\" DOWNLOADKEYRING RACF keyring used for securing outbound TLS connections, as required by z/OS \"AUTH/*\" <p>ACTION: for each of the variables in the ptfJob section referenced above, copy and paste the corresponding <code>Default</code> value into your <code>values.yaml</code> file within the IBM Z Upgrade Agent section.</p> <p>The result should look similar to what\u2019s shown below:</p> <pre><code>ptfJob:\n  SMPNTS: \"/u/smpe\"\n  SMPWDIR_PATH: \"/u/smpwkdir\"\n  SMPJHOME: \"/usr/lpp/java/java8/J8.0_64\"\n  SMPCPATH: \"/usr/lpp/smp/classes\"\n  ORDER_SERVER_URL: \"https://eccgw01.boulder.ibm.com/services/projects/ecc/ws/\"\n  KEYRING: \"IBMUSER/SMPERING\"\n  CERT_NAME: \"SMPE Client Certificate\"\n  DOWNLOAD_METHOD: \"https\"\n  DOWNLOADKEYRING: \"*AUTH*/*\"\n</code></pre>"},{"location":"agentdeploy/upgrade-agent/pvc/","title":"Configure the 'pvc' variable with storageClass","text":""},{"location":"agentdeploy/upgrade-agent/pvc/#configuring-the-pvcstorageclass-variable","title":"Configuring the <code>pvc.storageClass</code> variable","text":"<p>Scrolling to the end of the upgrade-agent section of <code>values.yaml</code>, you should see the <code>pvc</code> section as shown below: </p><pre><code>pvc:\n  storageClass: \"ocs-storagecluster-cephfs\"\n</code></pre> <p>Set the value of the <code>storageClass</code> variable to your cluster's storage class: <code>managed-nfs-storage</code>.</p> <p>After doing so, the result should look like the following:</p> <pre><code>pvc:\n  storageClass: \"managed-nfs-storage\"\n</code></pre>"},{"location":"agentdeploy/upgrade-agent/secrets-data/","title":"Configure the 'secrets.data' variables","text":""},{"location":"agentdeploy/upgrade-agent/secrets-data/#configuring-the-secretsdata-variables","title":"Configuring the <code>secrets.data</code> variables","text":"<p>Scrolling down further in the IBM Z Upgrade Agent section of your <code>values.yaml</code> file, you will see a <code>secrets.data</code> section with additional variables you must configure. It will look like what\u2019s shown below:</p> <pre><code>secrets:\n  data:\n    ZOSMF_ENDPOINT: \"\"\n    ZOSMF_USERNAME: \"\"\n    ZOSMF_PASSWORD: \"\"\n    AGENT_AUTH_TOKEN: \"\"\n    WRAPPER_USERNAME: \"\"\n    WRAPPER_PASSWORD: \"\"\n    INGESTION_PASSWORD: \"\"\n</code></pre> <p>The below table describes each of the variables in the <code>secrets.data</code> variables section. The rows with default values can be set to what's shown in the <code>Default value to set</code> column. The rows without default values are unique to your environment and will require you to set that value using the instructions below in this section. </p> Variable name Description Default value to set ZOSMF_ENDPOINT Endpoint URL for z/OSMF, provided by IBM for managing and interacting with z/OS systems. ------- ZOSMF_USERNAME User ID for connecting to the z/OSMF endpoint \"IBMUSER\" ZOSMF_PASSWORD Password/Passphrase for connecting to the z/OSMF endpoint ------- AGENT_AUTH_TOKEN Authentication token used to register the agent with WxO \"upgrade_auth_token\" WRAPPER_USERNAME Username for accessing the WRAPPER_URL endpoint \"admin\" WRAPPER_PASSWORD Password for accessing the WRAPPER_URL endpoint ------- INGESTION_PASSWORD Password for accessing the INGESTION_URL endpoint ------- <p>ACTION: Set the default variable values for the rows above in your <code>values.yaml</code> file:</p> <ul> <li><code>ZOSMF_USERNAME: \"IBMUSER\"</code></li> <li><code>AGENT_AUTH_TOKEN: \"upgrade_auth_token\"</code></li> <li><code>WRAPPER_USERNAME: \"admin\"</code></li> </ul>"},{"location":"agentdeploy/upgrade-agent/secrets-data/#set-your-zosmf_endpoint-variable","title":"Set your <code>ZOSMF_ENDPOINT</code> variable","text":"<p>Now, you will set the <code>ZOSMF_ENDPOINT</code> variable to the unique z/OSMF endpoint URL of your Wazi z/OS environment. This can be gathered with the following steps. </p> <ol> <li> <p>Locate and record the value of your Ansible Automation Platform UI URL found in your environment details, i.e. https://itzvsi-aap-ebds04j.vsi.techzone.ibm.com</p> <p></p> </li> <li> <p>Within your copied URL, change the <code>aap</code> string to <code>zos</code>. In the above example, it would then look like the following:</p> <p>https://itzvsi-zos-ebds04j.vsi.techzone.ibm.com</p> </li> <li> <p>And finally, append <code>:10443/zosmf</code> to the end of the string. The result should look similar to the following:</p> </li> </ol> <p>https://itzvsi-zos-ebds04j.vsi.techzone.ibm.com:10443/zosmf</p> <p>This would be the final value to set for the <code>ZOSMF_ENDPOINT</code> variable (note - your URL will be different and is dependent on your Lab environment)</p>"},{"location":"agentdeploy/upgrade-agent/secrets-data/#set-your-zosmf_password-variable","title":"Set your <code>ZOSMF_PASSWORD</code> variable","text":"<p>Set the <code>ZOSMF_PASSWORD</code> variable to a new RACF Password/Passphrase that the IBMUSER ID uses to log into TSO. </p> <p>Follow the below steps to reset your RACF passphrase for the IBMUSER user and set the value to the <code>ZOSMF_PASSWORD</code> variable.</p> <ol> <li> <p>Open and log into the Ansible Automation Platform (AAP) web console using the same AAP UI URL referenced above in your Lab env details.</p> </li> <li> <p>Click templates under the Resources section. </p> <p></p> </li> <li> <p>Click the launch icon for the <code>z/OS TSO Command(s)</code> template.</p> <p></p> </li> <li> <p>Replace the default command with the command that follows, and substituting a passphrase of your choice for the string <code>YOUR_PASSWORD_PHRASE</code>:</p> <pre><code>ALTUSER IBMUSER PHRASE(\u2018YOUR_PASSWORD_PHRASE\u2019) NOEXPIRE RESUME\n</code></pre> Syntax rules for RACF Password Phrases (below) <ul> <li>minimum length: 9 characters</li> <li>Must contain at least 2 alphabetic characters (A - Z, a - z)</li> <li>Must contain at least 2 non-alphabetic characters (numerics, punctuation, or special characters, including spaces)</li> <li>Must not contain more than 2 consecutive characters that are identical</li> </ul> <p>Note: if you typed the command yourself, be sure to include the single-quotes before and after the password. Record the password as it will be needed later.</p> <p></p> </li> <li> <p>Click Launch. </p> <p></p> </li> <li> <p>Verify that the job is Successful by locating the message <code>\"failed\": false</code> in the job output. </p> <p></p> </li> <li> <p>Verify that you can log into z/OSMF in a new browser tab. Navigate to z/OSMF using the <code>ZOSMF_ENDPOINT</code> URL you previously recoreded and set in VS Code. </p> </li> <li> <p>Enter (a) <code>IBMUSER</code> for the z/OS USER ID, (b) the passphrase you just set for the z/OS PASSWORD, and then (c) click LOG IN. </p> <p></p> <p>Once successfully logged in, make sure to set the <code>ZOSMF_PASSWORD</code> variable in <code>values.yaml</code> to the passphrase you entered.</p> </li> </ol>"},{"location":"agentdeploy/upgrade-agent/secrets-data/#set-your-wrapper_password-variable","title":"Set your <code>WRAPPER_PASSWORD</code> variable","text":"<p>Set the <code>WRAPPER_PASSWORD</code> variable to the <code>&lt;WRAPPER_PASSWORD&gt;</code> value you set in your wrapper-creds.yaml file in Section Deploy secrets for OpenSearch and Client Ingestion.</p>"},{"location":"agentdeploy/upgrade-agent/secrets-data/#set-your-ingestion_password-variable","title":"Set your <code>INGESTION_PASSWORD</code> variable","text":"<p>Finally, set the <code>INGESTION_PASSWORD</code> variable to the authkey value you set in your client-ingestion-secret.yaml file in Section Deploy secrets for OpenSearch and Client Ingestion.</p>"},{"location":"demo-scenarios/access-agents/","title":"Access your deployed agents","text":""},{"location":"demo-scenarios/access-agents/#access-your-deployed-agents","title":"Access your deployed agents","text":"<p>By leveraging watsonx Assistant for Z for the pre-built Z agents, each agent deployment is automatically \u2018bootstrapped\u2019 to your watsonx Orchestrate environment where the agents are immediately accessible for testing.</p> <p>In this section, you will access each of the deployed agents, test the scenarios, and learn how to embed your agent\u2019s chat within a webpage for external access.</p> <ol> <li> <p>Access your watsonx Orchestrate UI within the IBM Cloud web console. Once logged in, you should see the Agent Chat screen as shown below:</p> <p>IMAGE</p> <p>The Agent Chat screen is where you can go to interact with your \u2018deployed\u2019 agents.</p> <p>Note: each of the agents you previously deployed are bootstrapped to WxO as \u2018draft\u2019 versions of each of the agents. Once each agent has been successfully tested within WxO, you can then deploy each agent to the \u2018live\u2019 version to make it externally accessible.</p> </li> <li> <p>To access the \u2018Draft\u2019 version of each of your 3 agents, click on the hamburger icon in the top-left corner of the WxO UI, then navigate to Build --&gt; Agent Builder, as shown below:</p> <p>IMAGE</p> </li> <li> <p>Once in the Agent Builder page, verify you can see a tile for each of your deployed agents:</p> <ul> <li>IBM Z Upgrade Agent</li> <li>IBM Z Support Agent</li> <li>IBM Z OMEGAMON Insights Agent</li> </ul> <p>IMAGE</p> <p>Note: by default, you may also see the \u2018AskOrchestrate\u2019 agent within your agent list. This can be ignored.</p> </li> </ol>"},{"location":"demo-scenarios/omegamon-agent/","title":"placeholder","text":""},{"location":"demo-scenarios/support-agent/","title":"Test the IBM Z Support Agent","text":""},{"location":"demo-scenarios/support-agent/#test-the-ibm-z-support-agent","title":"Test the IBM Z Support Agent","text":"<p>Now you will test the capabilities of the IBM Z Support Agent.</p> <ol> <li> <p>Within the Agent Builder view, click on the tile for your IBM Z Support Agent.</p> <p>IMAGE</p> </li> <li> <p>Once in the agent editor view for the IBM Z Support Agent, take note of the following agent definitions which were bootstrapped as part of the watsonx Assistant for Z deployment:</p> <ul> <li>Orchestrator agent description</li> <li>Collaborator agent (pointing to your deployed external agent on OpenShift)</li> <li>Orchestrator agent instructions/behavior</li> </ul> <p>IMAGE</p> <p>IMAGE</p> </li> <li> <p>On the right-hand side of the screen, you should see Preview chat window for your agent. Click in the text-box of the Preview chat window and prompt the agent with the following, replacing <code>&lt;dump title&gt;</code> with a unique name for your dump:</p> <p><code>Take z/OS dump with dump title &lt;dump title&gt;</code></p> <p>IMAGE</p> </li> <li> <p>You\u2019ll then get a response from the agent prompting you for more details. Respond with the following information:</p> <ul> <li>storage areas (optional): provide a list of storage areas to include in the dump, or exclude to use the default</li> <li>jobname: provide a unique job name for running the job on z/OS</li> <li>dataset name: provide a unique dataset name used to capture the dump<ul> <li>ensure your dataset name follows standard dataset naming conventions and rules on z/OS</li> </ul> </li> <li>verbosity (optional): provide a verbosity level to use, or exclude to use the default</li> </ul> <p>For example:</p> <pre><code>use jobname *MASTER* and dataset name IBMUSER.TEST.DUMP9\n</code></pre> <p>IMAGE</p> </li> <li> <p>Based on the inputs provided, the agent may request for more details in order to run the job. If provided enough details, the agent will then provide a summary of the parameters supplied and ask to approve or reject.</p> <p>Respond with <code>approve</code></p> <p>IMAGE</p> </li> <li> <p>After approving the job, the agent will return a response, including the job_id and job_status. This initiates a run of the corresponding Ansible playbook in AAP to capture a z/OS system dump.</p> </li> <li> <p>You can next check the status of the job by prompting the agent with the following, replacing <code>&lt;job_id&gt;</code> with the job id returned by your agent.</p> <p><code>Check status of job &lt;job_id&gt;</code></p> <p>For example:</p> <p>IMAGE</p> </li> <li> <p>In the above example, the job status is <code>successful</code>. As a next step, you could initiate the transmitting of the z/OS dump to IBM support via a case number. For example, this can be done with the following prompt:</p> <p><code>Send z/OS dump from dataset &lt;dataset-name&gt; to case number TS019840250</code></p> <p>NOTE: For this tool execution, you can use case # TS019840250.</p> </li> <li> <p>After prompting the agent, it will then provide a summary asking you to approve or reject, as shown below:</p> <p>IMAGE</p> </li> <li> <p>Once approved, the agent will return a summary, including the job_id and job_status as shown below:</p> <p>IMAGE</p> </li> <li> <p>Like before, you can check the status by prompting the agent with the following, replacing <code>&lt;job_id&gt;</code> with the job id returned by your agent:</p> <p><code>Check status of job &lt;job_id&gt;</code></p> <p>IMAGE</p> <p>NOTE: you can continue monitoring the status of the job with the above command until the agent returns that the job was successful.</p> </li> </ol>"},{"location":"demo-scenarios/upgrade-agent/","title":"placholder","text":""},{"location":"ingest/Overview/","title":"Overview","text":"<p>test</p>"},{"location":"ingest/cos-service-credentials/","title":"Create Service Credentials for IBM COS","text":""},{"location":"ingest/cos-service-credentials/#create-service-credentials-for-ibm-cloud-object-storage-cos","title":"Create service credentials for IBM Cloud Object Storage (COS)","text":"<p>Before uploading the provided sample documents to IBM Cloud Object Storage (COS), you must first create service credentials that you will use to connect to your instance.</p> <ol> <li> <p>Navigate to the Resource List of your provisioned SaaS services in IBM Cloud (ensuring you're in the correct IBM Cloud account). The steps to access your Resource List can be found by following the instructions in PLACEHOLDER Section 3.1: Accessing IBM watsonx Orchestrate Trial/Standard Plan. </p> </li> <li> <p>In the Resource List page, click on the Storage drop-down and click on the name of your COS instance. </p> <p></p> </li> <li> <p>Click on the Service credentials tab and then click on New Credential +</p> <p></p> </li> <li> <p>In the Create credentials window, set the following values and then click Add. </p> <p>a. Name: enter any name</p> <p>b. Role: select Manager</p> <p>c. Toggle Include HMAC Credential to On</p> <p>d. Toggle the Control by Secrets Manager to the Off position</p> <p></p> </li> <li> <p>You should then see your new credential in the list. Click on the drop-down next to your credentials to display the credentials details.</p> <p></p> </li> <li> <p>Then you should see your credential details as shown below.</p> <p>Copy and record your unique values for the following parameters as you will need them in the next steps: </p> <p>a. access_key_id</p> <p>b. secret_access_key</p> <p></p> </li> </ol>"},{"location":"ingest/create-storage-bucket/","title":"Create a storage bucket","text":""},{"location":"ingest/create-storage-bucket/#create-a-new-storage-bucket","title":"Create a new storage bucket","text":"<p>Next you will create a new bucket in your COS instance which will you will later upload the provided sample documents to for ingestion.</p> <ol> <li>In your local workstation's command prompt or terminal window, run the following command to create a new bucket, replacing:</li> </ol> <ul> <li> <p>&lt;unique_bucket_name&gt;: any unique name for your bucket</p> </li> <li> <p>&lt;your_region&gt;: replace with the region your Single Node OpenShift environment is provisioned in (check your environment details). Options include:</p> <ul> <li>us-south</li> <li>eu-de</li> <li>eu-gb</li> <li>us-east</li> <li>... </li> </ul> <pre><code>ibmcloud cos bucket-create --bucket &lt;unique_bucket_name&gt; --class standard --region &lt;your_region&gt;\n</code></pre> </li> </ul> <ol> <li> <p>If created successfully, you should see output similar to what's shown below:</p> <p></p> </li> <li> <p>Verify the bucket was successfully created by going back to your COS Instance in IBM Cloud and clicking on the Buckets tab. You should see your new bucket listed.</p> <p></p> </li> </ol>"},{"location":"ingest/download-zassist/","title":"Download and configure zAssist utility","text":""},{"location":"ingest/download-zassist/#download-and-configure-the-zassist-utility","title":"Download and configure the zassist utility","text":"<p>The zassist utility is an executable program that automates the ingestion of client documentation into the RAG for watsonx Assistant for Z. A version of zassist is available for download for IBMers and Business Partners for conducting pilots. Follow the steps below to download and install zassist.</p> <ol> <li> <p>Click the following link and download the zassist.zip file from Box:</p> <p>https://ibm.box.com/s/bm1df1gakz4302vrfd9to3rf221420ze</p> </li> <li> <p>Extract the .zip file.</p> </li> <li> <p>Locate the appropriate file for your local workstation's operating system. </p> <p></p> </li> <li> <p>Either copy the appropriate zassist file to a directory in your PATH, or add the appropriate directory to your PATH environment variable. </p> <p>Additional information for doing this can be found here. </p> <p>NOTE: Windows users may need to rename the file to zassist.exe for proper execution</p> </li> <li> <p>Run the following command to verify it's working:</p> <pre><code>zassist\n</code></pre> <p></p> </li> <li> <p>And finally, enable the client-side ingestion feature through a remote S3 source by running the following command on your local terminal / command-line:</p> <p>Mac users: </p><pre><code>oc -n wxa4z-zad patch zassistantdeploy zassistantdeploy --type='merge' -p='{\"spec\": {\"clientIngestion\": {\"beta\": {\"enabled\": true}}}}'\n</code></pre> <p>Windows users: </p><pre><code>oc -n wxa4z-zad patch zassistantdeploy zassistantdeploy --type=\"merge\" -p=\"{\\\"spec\\\": {\\\"clientIngestion\\\": {\\\"beta\\\": {\\\"enabled\\\": true}}}}\"\n</code></pre> </li> </ol>"},{"location":"ingest/execute-ingestion/","title":"Execute doc ingestion","text":""},{"location":"ingest/execute-ingestion/#execute-document-ingestion","title":"Execute Document Ingestion","text":"<p>In this step you will log into your client ingestion server and kickoff the ingestion pipeline for your uploaded files.</p> <ol> <li> <p>Navigate to your local command-prompt or Terminal window and set the WXA4Z_TLS_VERIFY environment variable to false to skip server certificate verification by running the following command (depending on your operating system):</p> <p>Mac users: </p><pre><code>export WXA4Z_TLS_VERIFY=false\n</code></pre> <p>Windows users: </p><pre><code>set WXA4Z_TLS_VERIFY=false\n</code></pre> <p>Windows PowerShell Users: </p><pre><code>Set-Item Env:\\WXA4Z_TLS_VERIFY \u201cfalse\u201d\n</code></pre> </li> <li> <p>Retrieve the Server URL for your Client Ingestion Server.</p> <p>Mac users: </p><pre><code>echo https://$(oc -n wxa4z-zad get route wxa4z-client-ingestion -o jsonpath=\"{.spec.host}\")\n</code></pre> <p>Windows users (this method can also be used by Mac users):</p> <p>You can retrieve the URL in your OCP Web console by navigating to Networking -&gt; Routes, and then copy the URL for the wxa4z-client-ingestion route as shown below:</p> <p></p> </li> <li> <p>Retrieve the client-ingestion-authkey for your Client Ingestion server by running the following command: </p> <pre><code>oc -n wxa4z-zad get secret client-ingestion-authkey -o jsonpath=\"{.data.authkey}\" | base64 -d\n</code></pre> <p>The output of this command is your unique auth-key that you had previously set. You will need the output of both previous commands in the next step.</p> <p>If the command doesn't work for you</p> <p>If the command doesn't work for you, you can find the authkey value by viewing the client-ingestion-secret.yaml file you modified, and copying the value set for the authkey parameter. </p> </li> <li> <p>Log into your client ingestion server using the zassist utility by running the following command, replacing <code>&lt;server_url&gt;</code> with the value from step 2 above:</p> <pre><code>zassist login &lt;server_url&gt;\n</code></pre> </li> <li> <p>When prompted, enter the authkey value from step 3 above. Then verify that a Success message is returned. </p> </li> <li> <p>Verify that you're connected by running the following command:</p> <pre><code>zassist list\n</code></pre> <p>This command will return all connected remote sources to your client ingestion server. By default, you should see in the output that there are no connected sources under <code>ID</code>.</p> </li> <li> <p>Start the ingestion process to connect your remote COS source to the watsonx Assistant for Z data ingestion pipeline by running the following command (see below the command on how to retrieve each of the parameters listed):</p> <pre><code>zassist ingest s3 \"&lt;SOURCE_NAME&gt;\" \"&lt;S3_URL&gt;\" \"&lt;S3_KEY_ID&gt;\" \"&lt;S3_SECRET_KEY&gt;\" \"&lt;BUCKET_NAME&gt;\" --watch --skip-pii\n</code></pre> <p>a. &lt;SOURCE_NAME&gt; : replace this with any name of your choice. Make sure the name is in lowercase, uses only underscores, and does not start with a number. </p> <p>b. &lt;S3_URL&gt;: </p> <ul> <li>To retrieve your <code>&lt;S3_URL&gt;</code>, navigate to your COS instance in IBM Cloud </li> <li> <p>Click on the Endpoints tab on the left-hand menu:</p> <p></p> </li> <li> <p>In the 'Select resiliency' drop-down, select Regional: </p> <p></p> </li> <li> <p>In the \u2018Select location\u2019 drop-down click on the region where you created your bucket. In the example shown earlier, the bucket was created in the eu-de region, so you would select the Europe \u2013 Frankfurt (eu-de) region as shown below.</p> <p></p> <p>Make sure to select the region that corresponds to your own bucket</p> </li> <li> <p>Based on the region you selected, copy and record the region's Public endpoint as shown below (in this example, it's for the eu-de region)</p> <p></p> </li> <li> <p>After recording your Public endpoint in a local notepad, append <code>https://</code> to the front of it. In the example shown above, the new endpoint URL would become:</p> <pre><code>https://s3.eu-de.cloud-object-storage.appdomain.cloud\n</code></pre> <p>This is the final value of your  variable that you will use for the above zassist command.</p> </li> </ul> <p>c. &lt;S3_KEY_ID&gt;: replace this with the \u2018access_key_id\u2019 value in the Service Credentials you created for your COS instance in Step 6 of Section Create service credentials for IBM COS</p> <p></p> <p>d. &lt;S3_SECRET_KEY&gt;: replace this with the 'secret_access_key' value in the Service Credentials you created for your COS instance in Step 6 of Section Create service credentials for IBM COS</p> <p></p> <p>e. &lt;BUCKET_NAME&gt;: replace this with the name of your bucket you originally created in your COS instance.</p> <p>The final result of the command (once you've plugged in your unique values) should look something like the example command below (these values will not work for you):</p> <pre><code>zassist ingest s3 \"my_source\" \"https://s3.eu-de.cloud-object- storage.appdomain.cloud\" \"7633c87cbcc0484bb9436bb06e70ef08\" \"8d326111d26c930a4992ce612eec065e4f11d2234ec96e02\" \"demo-byod\" --watch -- skip-pii\n</code></pre> </li> <li> <p>Execute the previous command from your local command-prompt/terminal. Once executed, the ingestion process will begin. You should see output similar to below:</p> <p></p> <p>Command options used....</p> <p>Because you used the --watch flag in the command, it will begin monitoring the status of the ingested source. In our case there are 3 files to be ingested, as shown in the screenshot above.</p> <p>Additionally, notice that you also used the --skip-pii flag at the end of your command. This will bypass any automatic PII checks that are done. This is suitable for the Lab as we\u2019re using test data. For typical customer pilots, you should not be ingesting any PII data, otherwise cleaning the data to ensure no sensitive data is included.</p> </li> <li> <p>Once the ingestion process completes (typically less than 5 min.) you will see something like what\u2019s shown below, indicating that the new 3 files have been successfully ingested.</p> <p></p> </li> <li> <p>Finally, verify that the documents are now ingested in your remote S3 source by running the following command:</p> <pre><code>zassist list\n</code></pre> <p>This will list all connected remote sources, as shown below:</p> <p></p> <p>In the above command, you can see the original Source Name that you inputted into the zassist ingest command parameter, as well as it\u2019s ID and Status.</p> </li> <li> <p>To view detailed information about the source, run the following command, replacing <code>&lt;id&gt;</code> with the ID value returned in the previous command:</p> <pre><code>zassist details &lt;id&gt;\n</code></pre> <p>This should return something similar to below:</p> <p></p> <p>In the returned output, you should see that the Completed state is set to \u2018true\u2019, and you should see all 3 files that you uploaded to your S3 bucket in your COS instance.</p> <p>For more information on the zassist command syntax, reference the IBM docs page here.</p> </li> </ol>"},{"location":"ingest/ibmcloud-utility/","title":"Log into COS via ibmcloud utility","text":""},{"location":"ingest/ibmcloud-utility/#log-into-cos-via-ibm-cloud-utility","title":"Log into COS via IBM Cloud Utility","text":"<p>Next you will connect to your COS instance via command-line, using the credential values you recorded previously.</p> <ol> <li> <p>Navigate to your local workstation\u2019s command prompt or terminal window. Make sure the ibmcloud CLI is already installed.</p> <p>This can be verified by running the following command:</p> <pre><code>ibmcloud help\n</code></pre> <p>If you do not have it installed, do so by following these instructions.</p> </li> <li> <p>Install the COS Plugin by running the following command:</p> <pre><code>ibmcloud plugin install cloud-object-storage\n</code></pre> </li> <li> <p>Run the following command to authenticate to IBM Cloud using HMAC authentication:</p> <pre><code>ibmcloud cos config auth --method HMAC\n</code></pre> </li> <li> <p>Run the following command to authenticate to your IBM COS instance:</p> <pre><code>ibmcloud cos config hmac\n</code></pre> </li> <li> <p>You will then be prompted for your Access key. Copy and paste the value of your access_key_id that you recorded earlier and hit enter. </p> <p></p> <p>NOTE: your access_key_id is unique and will not be the same as above</p> </li> <li> <p>Next, you will be prompted for your Secret key. Copy and paste the value of your secret_access_key that you recorded earlier and hit enter. </p> <p></p> <p>NOTE: your secret_access_key is unique and will not be the same as above</p> </li> <li> <p>You should then get the following message:</p> <pre><code>Successfully saved HMAC Credentials to file\n</code></pre> </li> <li> <p>Finally, run the following command to list the buckets created in your instance:</p> <pre><code>ibmcloud cos buckets\n</code></pre> <p>In the output, you should see that no buckets have been created:</p> <p></p> </li> </ol>"},{"location":"ingest/test-q%26a/","title":"Test assistant Q&A with ingested documents","text":""},{"location":"ingest/test-q%26a/#test-assistant-qa-with-newly-ingested-documents","title":"Test Assistant Q&amp;A with newly ingested documents","text":"<p>Now that you\u2019ve successfully ingested the sample customer documents, you\u2019ll be able to test the assistant\u2019s ability to answer company-specific questions related to the internal documents. First you will adjust your assistant\u2019s conversational search settings to prioritize the ingested documents. </p> <p>Secondly, you will prompt the assistant with questions related to those documents to gauge performance.</p>"},{"location":"ingest/test-q%26a/#adjust-conversational-search-settings-for-ingested-documentation","title":"Adjust conversational search settings for ingested documentation","text":"<p>First, you will adjust the conversational search settings for your assistant in order to prioritize the ingested documents for Q&amp;A.</p> <ol> <li> <p>Navigate back to the watsonx Orchestrate UI.</p> </li> <li> <p>Go to the Assistant Builder view by clicking on Build --&gt; Assistant Builder.</p> <p>IMAGE</p> </li> <li> <p>In the left-side navigation, click on Generative AI.</p> <p>IMAGE</p> </li> <li> <p>At the bottom of the screen, click on View search integration.</p> <p>IMAGE</p> </li> <li> <p>Then click Custom Service. </p> </li> <li> <p>Scroll down to the Metadata field and modify it to prioritize your newly ingested documents.</p> <p>Currently, your Metadata field should look like what\u2019s shown below:</p> <pre><code>{\"doc_weight\":\n{\"product_docs\":0.5,\n\"customer_docs\":0.5},\n\"ibm_indices\":\"*_ibm_docs_slate,*_ibm_redbooks_slate\",\"standardize\":true,\n\"customer_indices\":\"customer_*\"}\n</code></pre> <p>Notice that <code>product_docs</code> and <code>customer_docs</code> are set equally (<code>0.5</code>). This is the default and causes the Assistant to prioritize the data search equally between the IBM documentation and the customer documents. </p> <p>In this case, we want the Assistant to prioritize the newly ingested customer docs. To do this, set <code>product_docs</code> to <code>0.2</code> and set <code>customer_docs</code> to <code>0.8</code>. When done, your Metadata field should look like the following:</p> <pre><code>{\"doc_weight\":\n{\"product_docs\":0.2,\n\"customer_docs\":0.8},\n\"ibm_indices\":\"*_ibm_docs_slate,*_ibm_redbooks_slate\",\"standardize\":true,\n\"customer_indices\":\"customer_*\"}\n</code></pre> </li> <li> <p>Secondly, you have the ability to set the scope of customer documentation that gets searched when generating a response. By default, <code>customer_indices</code> is set to <code>customer_*</code>.</p> <p>What this means is that all ingested documents from all of your ingested sources will be searched. In the case where you want to narrow the scope of the ingested documents to a single source, this can be modified to point to that source.</p> <p>Recall the output of the <code>zassist list</code> command. For example:</p> <p>IMAGE</p> <p>In the example above, when running the command to ingest documents, the <code>&lt;source name&gt;</code> provided was <code>my_source</code>. Note: your source name may be different. To check, issue the <code>zassist list</code> command on your command-line.</p> <p>In this case, we\u2019ve only created one source. But in the case you have multiple sources, each with their own set of ingested documents, it would be possible to narrow the scope of documents available to the assistant by configuring the <code>customer_indices</code> parameter in the Metadata field.</p> <p>To do this, modify the <code>customer_indices</code> value by replacing <code>customer_*</code> with <code>customer_&lt;your_source_name&gt;</code>.</p> <p>Using the screenshot above as an example, the new Metadata field would look like the following:</p> <pre><code>{\"doc_weight\":\n{\"product_docs\":0.2,\n\"customer_docs\":0.8},\n\"ibm_indices\":\"*_ibm_docs_slate,*_ibm_redbooks_slate\",\"standardize\":true,\n\"customer_indices\":\"customer_my_source\"}\n</code></pre> <p>NOTE: do not copy and paste exactly what's shown above. Make sure to use your unique source name. </p> </li> <li> <p>Lastly, for the purpose of testing Q&amp;A for the ingested documents, set the Contextual awareness setting to Single turn. Then click Save and Close.</p> <p>IMAGE</p> </li> </ol>"},{"location":"ingest/test-q%26a/#test-client-specific-qa-with-ingested-documents","title":"Test client-specific Q&amp;A with ingested documents","text":"<p>Now that you\u2019ve successfully ingested the sample customer documents and modified your conversational search settings, you\u2019re ready to verify the assistant\u2019s usage of the ingested documents.</p> <ol> <li> <p>Navigate back to the Preview page by hovering your cursor over the left-side navigation and clicking Preview. </p> <p>IMAGE</p> </li> <li> <p>Enter the following prompts to your assistant that are specifically referencing the sampled documentation provided. For each of the provided prompts, an example output is provided which may be different from your assistant\u2019s response. For each response, feel free to view the referenced citation to identify where the answer was taken from.</p> <p>PROMPT:</p> <pre><code>The customer application is failing with ERR-CBL-001, what does this internal error mean?\n</code></pre> <p>Example Output:</p> <p>SCREENSHOT</p> <p>Click the citations drop-down at the bottom of the response. Notice how your ingested documented is referenced. Feel free to click on the citation to check the reference.</p> <p>IMAGE</p> <p>PROMPT:</p> <pre><code>What specific syntax changes do I need to make in COBOL to call Java using the internal framework?\n</code></pre> <p>Example Output:</p> <p>SCREENSHOT</p> <p>PROMPT:</p> <pre><code>What is the internal git lab link to execute the Java on z/OS pipeline?\n</code></pre> <p>Example Output:</p> <p>SCREENSHOT</p> <p>PROMPT:</p> <pre><code>Are there any production incidents that were resolved in relation to Data corruption in the production database? If yes who can I collaborate with to resolve a similar issue today and what are their names?\n</code></pre> <p>Example Output:</p> <p>SCREENSHOT</p> </li> </ol>"},{"location":"ingest/upload-docs/","title":"Upload docs to storage bucket","text":""},{"location":"ingest/upload-docs/#upload-sample-documents-to-storage-bucket","title":"Upload sample documents to storage bucket","text":"<p>Before you can begin the ingestion process, you must first upload your files to the S3 source (in this case your IBM COS bucket). In this lab, there are three sample documents provided to illustrate the types of internal documentation a customer may want to ingest, which you will use for the purpose of this lab.</p> <p>These documents include:</p> <ul> <li> <p>Mainframe_COBOL_Error_Codes.pdf     This is a document containing company-specific mainframe COBOL error codes for their application. Developers within the organization typically review this document to quickly diagnose issues based on the application error codes returned.</p> </li> <li> <p>Mainframe_Operational_Incidents_Logs.xlsx</p> <p>This is an Excel spreadsheet that is leveraged by the organization\u2019s operational support team and contains historical records of production-level incidents that occurred. For each incident, there\u2019s a record of what the incident was, the date, how it was resolved and who was involved in resolving the incident.</p> </li> <li> <p>COBOL-CICS-to-Java-Internal-Framework.pdf</p> <p>This document is leveraged by the development team and contains details about the organization\u2019s internal framework for developing applications consisting of legacy COBOL CICS interoperating with new Java code. Within the document contains company-specific coding practices and code syntax that the developers frequently reference.</p> </li> </ul> <ol> <li> <p>Download the following BYOD.zip file containing the sample documents: </p> <p>https://ibm.box.com/s/abvi4lujh01xxu2zw9frvfp5b5g48522</p> </li> <li> <p>Unzip the file on your local machine. </p> </li> <li> <p>On your local command-line, <code>cd</code> to that directory. Your working directory should contain the 3 included document files to later be ingested, as shown below:</p> <p></p> </li> <li> <p>For each of the 3 documents in your directory, upload it to your bucket using the command below, replacing:</p> </li> </ol> <ul> <li> <p>&lt;your_bucket_name&gt;: replace this with the name of your bucket used in section Create a storage bucket</p> </li> <li> <p>&lt;file_key&gt;: replace this with a unique name for the file - this is the file name that will appear in your bucket</p> </li> <li> <p>&lt;local_file_path&gt;: replace this with the path to the file in your directory</p> </li> <li> <p>&lt;your_region&gt;: replace this with the region in which you created your bucket in the previous step. Options include:</p> <ul> <li>us-south</li> <li>eu-de</li> <li>eu-gb</li> <li>us-east</li> <li>... </li> </ul> <pre><code>ibmcloud cos object-put --bucket &lt;your_bucket_name&gt; --key &lt;file_key&gt; --body &lt;local_file_path&gt; --region &lt;your_region&gt;\n</code></pre> <p>EXAMPLE</p> <p>As an example, let\u2019s say I previously created a bucket in the previous step with bucket_name demo-byod and I created it in the eu-de region as shown below:</p> <p></p> <p>In this case, I would upload each of my 3 sample files to the bucket using the commands below (one command for each local file):</p> <pre><code>ibmcloud cos object-put --bucket demo-byod --key COBOL-CICS --body COBOL- CICS-to-Java-Internal-Framework.pdf --region eu-de\n</code></pre> <pre><code>ibmcloud cos object-put --bucket demo-byod --key Error-Codes --body Mainframe_COBOL_Error_Codes.pdf --region eu-de\n</code></pre> <pre><code>ibmcloud cos object-put --bucket demo-byod --key Incident-Logs --body Mainframe_Operational_Incidents_Logs.xlsx --region eu-de\n</code></pre> </li> </ul> <ol> <li> <p>Once, all three files have been successfully uploaded to your COS bucket, you should be able to verify they now exist by clicking on your bucket name in your COS instance within IBM Cloud.</p> <p></p> <p>In your bucket, click on the Objects tab and you should see all 3 files present, as shown below:</p> <p></p> </li> </ol>"},{"location":"techzone/aap-zos/","title":"Ansible Automation Platform(AAP) & z/OS","text":""},{"location":"techzone/aap-zos/#ansible-automation-platform-aap-zos","title":"Ansible Automation Platform (AAP) &amp; z/OS","text":""},{"location":"techzone/aap-zos/#summary-of-the-environment","title":"Summary of the environment","text":"<p>The third lab environment you will use is the Ansible Automation Platform (AAP) &amp; z/OS environment. This provides a pre-configured instance of both Ansible Automation Platform (AAP) and Wazi aaS z/OS deployed on IBM Cloud.</p> <p>The two resources are provisioned together in the TechZone environment and enables users to manage and automate z/OS tasks and subsystems with various pre-installed Ansible playbooks. It includes a z/OS back-end (Wazi as a Service) with all needed pre-requisites to quickly get started.</p> <p>This environment will come into play later on in the Lab when deploying your AI Agents. Each Agent has its own mechanism for accessing the back-end environment and performing tasks, gathering insights, etc.</p> <p>As an example, you will later deploy the IBM Z Upgrade Agent which leverages z/OSMF APIs to your back-end Wazi z/OS system. As another example, the IBM Z Support Agent you will later deploy will connect to your Ansible Automation Platform (AAP) instance to automate the collection and transfer of z/OS dumps.</p> <p>This environment will also be later used when building your own agent to automate the certificate renewal process on z/OS.</p>"},{"location":"techzone/aap-zos/#accessing-the-environment","title":"Accessing the environment","text":"<p>Follow the below instructions to access your Ansible Automation Platform (AAP) environment. Instructions later on in the Lab will instruct you on accessing the Wazi aaS z/OS environment.</p> <ol> <li> <p>In the IBM Technology Zone portal, expand My TechZone and select My Reservations, or click the following link:</p> <p>ITZ My reservations</p> <p></p> </li> <li> <p>Click the watsonx Assistant for Z Pilot - AAP &amp; z/OS tile.</p> <p></p> </li> <li> <p>Locate and record the AAP User Name (For UI access) and AAP User Password fields.</p> <p></p> </li> <li> <p>Record and then click the Ansible Automation Platform UI link.</p> <p></p> </li> <li> <p>Enter the Username and Password that is recorded in step 3 and click Log In.</p> <p></p> </li> <li> <p>Once logged in, you should be directed to the Dashboard view within the AAP Web console, as shown below:</p> <p></p> </li> </ol>"},{"location":"techzone/orchestrate/","title":"watsonx Orchestrate","text":""},{"location":"techzone/orchestrate/#watsonx-orchestrate-and-other-saas-services","title":"watsonx Orchestrate and other SaaS services","text":""},{"location":"techzone/orchestrate/#summary-of-the-environment","title":"Summary of the environment","text":"<p>The first Lab environment is a set of IBM Cloud SaaS resources we\u2019ll refer to in this Lab as the IBM watsonx Orchestrate environment. The resources are dedicated to you and are all available within the same IBM Cloud account you\u2019ve been granted access to. The SaaS resources used in this Lab guide consist of the three components below:</p> <ol> <li> <p>watsonx Orchestrate</p> <p>IBM watsonx Assistant for Z is powered by watsonx Orchestrate, a generative AI platform for building, accessing and testing AI agents and assistants. As an on-prem solution, the watsonx Orchestrate component of watsonx Assistant for Z is deployed on Red Hat OpenShift and the IBM Cloud Pak platform. With version 3 of the offering comes the ability to connect your agents to a broad range of components, including IBM Z infrastructure, middleware, tools, third-party software and custom applications, forming the foundation for scalable and secure enterprise operations.</p> <p>The chat interface allows users to engage with the system through conversational AI and goal-oriented agents. It provides an intuitive and responsive way to access the platform\u2019s capabilities.</p> <p>For the purpose of the Lab, you will be using a dedicated SaaS tenant of watsonx Orchestrate on IBM Cloud where you will be able to deploy your AI agents for watsonx Assistant for Z, as well as zRAG assistants to demonstrate various use cases.</p> <p>Later in the lab you will also use your watsonx Orchestrate environment to build your own agents for a set of Z specific use cases.</p> </li> <li> <p>watsonx.ai Runtime (WML)</p> <p>As mentioned above, you will be leveraging a cloud-based deployment to configure and execute various use cases supported by watsonx Assistant for Z. As such, you will leverage the watsonx.ai Runtime SaaS component on IBM Cloud to provide the underlying compute resources and services to power the AI agents you deploy. This provides a way to enable the Agentic AI features of the solution for the purposes of demos and pilots without having to install the full solution on-prem.</p> </li> <li> <p>IBM Cloud Object Storage (COS)</p> <p>The last IBM Cloud SaaS service in scope for the Lab is IBM Cloud Object Storage (COS) which is used for ingesting customer documentation into the zRAG component of watsonx Assistant for Z. It will be used to demonstrate how clients can augment their agent and assistants\u2019 conversational search capabilities by creating an internal knowledge base with their own documentation. This allows users to get insightful responses to a rnage of questions not possible with the default documentation within the zRAG.</p> </li> </ol>"},{"location":"techzone/orchestrate/#accessing-the-environment","title":"Accessing the environment","text":""},{"location":"techzone/sno/","title":"Single Node OpenShift cluster","text":""},{"location":"techzone/sno/#single-node-openshift-cluster","title":"Single Node OpenShift Cluster","text":""},{"location":"techzone/sno/#summary-of-the-environment","title":"Summary of the environment","text":"<p>The next Lab environment you will use is the Single Node OpenShift cluster deployed on IBM Cloud.</p> <p>The very first hands-on exercise in the Lab will be accessing your OpenShift cluster and deploying the zAssistantDeploy services with all dependent resources, including OpenSearch with the watsonx Assistant for Z RAG and the Client Ingestion service. This will service as a foundation for later deploying AI Agents onto your cluster that can be imported into watsonx Orchestrate for accessing and testing.</p> <p>Disclaimer: The various components of watsonx Assistant for Z (i.e. zRAG OpenSearch database) are deployed and collocated alongside the deployment of watsonx Orchestrate. For this Lab, you will use a dedicated OpenShift cluster for the sole purpose of deployed these components, with the exception of watsonx Orchestrate (SaaS version), as well as AI agents which will be made accessible within watsonx Orchestrate SaaS.</p>"},{"location":"techzone/sno/#accessing-the-environment","title":"Accessing the environment","text":"<p>Follow the below instructions to access your Single Node OpenShift environment.</p> <ol> <li> <p>Click the following link to open a browser window to your ITZ reservations.</p> <p>ITZ My reservations</p> </li> <li> <p>Click the Single Node OpenShift tile.</p> <p></p> </li> <li> <p>Scroll down and record the Cluster Admin Username and Cluster Admin Password.</p> <p></p> </li> <li> <p>Click the OCP Console link.</p> <p></p> </li> <li> <p>Enter the Cluster Admin Username and Cluster Admin Password values from step 3 and click Log in.</p> <p></p> </li> </ol>"},{"location":"watsonx-ai/api-key/","title":"Generate IBM Cloud API key","text":""},{"location":"watsonx-ai/api-key/#generate-ibm-cloud-api-key","title":"Generate IBM Cloud API key","text":"<p>In addition to the Project ID and Deployment Space ID secrets, you will also need an IBM Cloud API key configured as a secret in your agents\u2019 deployment. This section walks through the creation of a new API key for later use.</p> <ol> <li> <p>Go back to your previous tab where you launched the watsonx.ai Runtime service in IBM Cloud. The screen should look similar to the following:</p> <p></p> </li> <li> <p>Select Manage --&gt; Access (IAM)</p> <p></p> </li> <li> <p>In the IAM settings page, select API keys from the left-hand menu.</p> <p></p> </li> <li> <p>In the API keys screen, click on Create +.</p> <p></p> </li> <li> <p>Enter any Name for your API Key and click Create.</p> <p></p> </li> <li> <p>You\u2019ll then see a window appear \u201cAPI key successfully created\u201d</p> <p>IMPORTANT: Make sure to Download and Copy your API key (this can only be retrieved once).</p> <p></p> <p>Copy and record your API key value in a local notepad on your workstation for later use. This will later be referenced in your agents configuration as a shared secret.</p> <p>Once recorded successfully, you can close out of the window and proceed to the next section.</p> </li> </ol>"},{"location":"watsonx-ai/deployment-space/","title":"Create Deployment Space","text":""},{"location":"watsonx-ai/deployment-space/#create-deployment-space","title":"Create Deployment Space","text":"<p>The next step in your watsonx.ai configuration is creating a new Deployment space. Your Deployment Space ID is another secret that will be referenced later on in the configuration of your agents deployment.</p> <ol> <li> <p>Click on the 'hamburger' menu icon in the top-left corner of the screen and click on Deployment spaces.</p> <p></p> </li> <li> <p>In the upper-right hand corner, click New deployment space +.</p> <p></p> </li> <li> <p>In the Define details section:</p> <ul> <li>Name: enter a unique name for the deployment space</li> <li>Storage: ensure your COS instance is selected</li> <li>Watsonx.ai Runtime (optional): ensure your existing service is selected</li> </ul> <p>Then click Create.</p> <p></p> </li> <li> <p>Wait until a window appears with 'The space is ready' message. </p> <p>Then click Go to space.</p> <p></p> </li> <li> <p>In the new deployment space view, click on the Manage tab.</p> <p></p> </li> <li> <p>Finally, in the General tab, locate your Space GUID. This is your Deployment Space ID that will be frequently referenced in your agents configuration. </p> <p>Copy and record your \u2018Space GUID\u2019 value in a local notepad for later use.</p> <p></p> <p>IMPORTANT: copy and record your \u2018Space GUID\u2019 value in a local notepad for later use - and label it as your \u2018Deployment Space ID\u2019.</p> </li> </ol>"},{"location":"watsonx-ai/project/","title":"Create watsonx.ai Project","text":""},{"location":"watsonx-ai/project/#create-watsonxai-project","title":"Create watsonx.ai Project","text":"<p>Now that you\u2019ve tested the conversational search features of your zRAG assistant and tested document ingestion using the sample documents provided, you will prepare for agent deployment of a subset of foundational agents entitled with watsonx Assistant for Z. As part of the deployment, you will first need to configure your watsonx.ai services and captured the needed secrets to provide in your agents\u2019 deployment. This section covers this process in detail.</p> <p>NOTE: as you complete each following sub-section, ensure you\u2019re recording all of the values being referenced in a local notepad. This will make life much easier later on during the agent deploy</p> <p>The first secret needed in configuring your watsonx Assistant for Z agents for deployment is retrieving your <code>&lt;WATSONX_PROJECT_ID&gt;</code>. This step will walk you through creating a Project in watsonx.ai and retrieving that secret for later use. </p> <ol> <li> <p>Navigate to your Resources List in the IBM Cloud web console using the first Lab environment. Reference the instructions in <code>Section 3.1: Accessing IBM watsonx Orchestrate Trial/Standard Plan</code> for a reminder on how to get to your Resource List.</p> </li> <li> <p>In the Resource List page, click on the AI/Machine Learning drop-down and click on the name of your watsonx.ai Runtime resource:</p> <p></p> </li> <li> <p>On the watsonx.ai Runtime in Cloud Pak for Data resource page, click on the drop-down arrow next to \u2018Launch in\u2019 and click on IBM Cloud Pak for Data</p> <p></p> </li> <li> <p>This should open up a new tab with a Getting started window. Exit out of the Getting started window and click on the \u2018hamburger\u2019 menu icon in the top-left corner of the screen:</p> <p></p> </li> <li> <p>Then click on the Projects drop-down and click on View all projects:</p> <p></p> </li> <li> <p>You should then see you don\u2019t have any existing projects. Click on New project + in the top-right corner of the screen:</p> <p></p> </li> <li> <p>In the Create a project window:</p> <ul> <li>enter any Name for the project</li> <li>Ensure a COS instance is selected for the Storage field</li> <li>Click 'Create'</li> </ul> <p></p> </li> <li> <p>You will then see a \u2018loading\u2019 screen while your project is being created. Wait until the project finishes creating and you\u2019ll see something similar to what\u2019s shown below:</p> <p></p> </li> <li> <p>In the Project view, click on the Manage tab, and then select Services &amp; integrations, as shown below:</p> <p></p> </li> <li> <p>Then click on Associate service:</p> <p></p> </li> <li> <p>In the pop-up window, click the checkbox next to the displayed service and click Associate.</p> <p></p> </li> <li> <p>Once done, you should see the new service added to the Services &amp; integrations page.</p> </li> <li> <p>Finally, click on the General tab on the left-hand menu and copy and paste your Project ID to a local notepad for later reference.</p> <p></p> <p>NOTE: make sure to copy and record your Project ID in a local notepad for later use. This will be referenced later during the configuration of your agents deployment.</p> </li> </ol>"},{"location":"watsonx-ai/service-instance-url/","title":"Retrieve watsonx Orchestrate Service Instance URL","text":""},{"location":"watsonx-ai/service-instance-url/#retrieve-watsonx-orchestrate-service-instance-url","title":"Retrieve watsonx Orchestrate Service Instance URL","text":"<p>The last shared secret needed to configure for your agents\u2019 deployment is the <code>&lt;ORCHESTRATE_ENV_URL&gt;</code>. This is the Service Instance URL of your watsonx Orchestrate tenant and is used for bootstrapping the deployment of agents to your watsonx Orchestrate environment. This section walks through the process of retrieving your Service Instance URL.</p> <ol> <li> <p>After generating your API key within IBM Cloud in the previous section, click on the \u2018hamburger\u2019 menu icon in the top-left corner of the IBM Cloud window and select Resource list.</p> <p></p> </li> <li> <p>Once in the Resource list, click on the AI/Machine Learning drop-down and click on the name of your watsonx Orchestrate resource:</p> <p></p> </li> <li> <p>Click Launch watsonx Orchestrate.</p> <p></p> </li> <li> <p>In the watsonx Orchestrate UI, click on you profile icon in the top-right corner and then Settings.</p> <p></p> </li> <li> <p>In the Settings page, click on the API details tab, then copy and record your Service instance URL to a local notepad for later use.</p> <p></p> <p>NOTE: copy and record your Service instance URL in a local notepad, and label it as your <code>&lt;ORCHESTRATE_ENV_URL&gt;</code>.</p> </li> </ol>"},{"location":"watsonx-ai/wml-base-url/","title":"Locate your WML Base URL","text":""},{"location":"watsonx-ai/wml-base-url/#locate-your-wml-base-url","title":"Locate your WML Base URL","text":"<p>The last shared secret needed to configure for your agents deployment is the <code>&lt;WATSONX_ML_URL&gt;</code> configuration parameter. </p> <p>This corresponds to the Base URL of your IBM watsonx.ai Runtime API endpoint. Follow the instructions below to locate and record the value for your environment.</p> <ol> <li> <p>Assuming you\u2019re still accessing the IBM Cloud account where your watsonx Orchestrate Trial/Standard Plan environment was accessed, navigate back to the Resource list within the Cloud console.</p> <p></p> </li> <li> <p>Under the AI / Machine Learning resource drop-down, identify the Location associated with your services as shown below:</p> <p></p> <p>NOTE: in the example above, the services are available in the us-south region. The region for your environment may be different.</p> <p>Take note of your services\u2019 region.</p> </li> <li> <p>The URL value of your <code>&lt;WATSONX_ML_URL&gt;</code> variable will be one of the following URLs depending on the region of your services. Copy and paste the appropriate URL for your region and copy to a notepad, labeled as <code>&lt;WATSONX_ML_URL&gt;</code>. This will be used later on for the agents deployments.</p> <ul> <li>us-south</li> <li><code>https://us-south.ml.cloud.ibm.com</code></li> <li>eu-gb</li> <li><code>https://eu-gb.ml.cloud.ibm.com</code></li> <li>eu-de</li> <li><code>https://eu-de.ml.cloud.ibm.com</code></li> <li>jp-tok</li> <li><code>https://jp-tok.ml.cloud.ibm.com</code></li> <li>au-syd</li> <li><code>https://au-syd.ml.cloud.ibm.com</code></li> <li>ca-tor</li> <li><code>https://ca-tor.ml.cloud.ibm.com</code></li> </ul> <p>Reference the latest list of WML Endpoint URLs here.</p> </li> </ol>"},{"location":"zAssistantDeploy/Overview/","title":"Overview","text":""},{"location":"zAssistantDeploy/Overview/#overview-of-zassistantdeploy","title":"Overview of zAssistantDeploy","text":"<p>IBM watsonx Assistant for Z leverages Conversational AI to provide accurate answers to questions related to IBM Z with detailed steps and links to enhance learning. This feature is based on Large Language Model (LLM) coupled with domain-specific Retreival-Augmented Generation (RAG) which augments the LLM with IBM Z domain- specific knowledge base and information.</p> <p>As an Openshift-based solution, watsonx Assistant for Z provides this capability via the zAssistantDeploy service on OpenShift. With the purchase of watsonx Assistant for Z, customers acquire entitlement to the watsonx Assistant for Z operator which is usd to deploy and configure the zAssistantDeploy service.</p> <p>zAssistantDeploy provides an OpenSearch deployment that is pre-installed with IBM Z documentation, along with a data ingestion service that can be used to load your own documents into the knowledge base. The solution\u2019s search parameters can then be configured to fetch content from those ingested documents.</p> <p>In this section, you will be deploying and configuring the zAssistantDeploy component of the solution on your provided OpenShift cluster to enable the zRAG capabilities for conversational AI.</p> <p>Steps include:</p> <ul> <li> <p>Accessing and logging into your OpenShift cluster from your local workstation</p> </li> <li> <p>Installing IBM Cert Manager on your cluster</p> </li> <li> <p>Installing the watsonx Assistant for Z Operator</p> </li> <li> <p>Deploying secrets required for OpenSearch and the Client Ingestion service</p> </li> <li> <p>Deploying the zAsssistantDeploy service on your cluster</p> </li> <li> <p>Verifying successful deployment and acquiring your OpenSearch connection details</p> </li> </ul> <p>Following this section, you will learn how to connect assistants and agents to your OpenSearch instance in order to configure conversational search leveraging the zRAG, as well as the ability to ingest custom documentation into the RAG database.</p>"},{"location":"zAssistantDeploy/deploy-secrets/","title":"Deploy secrets for OpenSearch and Client Ingestion","text":""},{"location":"zAssistantDeploy/deploy-secrets/#deploy-required-secrets-for-opensearch-and-client-ingestion","title":"Deploy required secrets for OpenSearch and Client Ingestion","text":"<p>In this step you will deploy the required secrets needed for authentication to the Z RAG and Client Ingestion service. For all of the instructions in this section, it is assumed that you\u2019re accessing your local command line or terminal prompt in the zAssistDeploy directory.</p> <ol> <li> <p>In your downloaded/extracted zAssistDeploy directory, there is an <code>os-secret.yaml</code> file. In a text editor of your choice(i.e.command-line,VSCode,etc.),modify this file to replace <code>&lt;OPENSEARCH_PASSWORD&gt;</code> with a secure password of your choice (and save it). </p> <p>Record this value for later use.</p> <p>IMAGE</p> </li> <li> <p>Create the secret by running the following command within the same directory:</p> <p><code>oc apply -f os-secret.yaml</code></p> </li> <li> <p>Next, modify the <code>client-ingestion-secret.yaml</code> file, replacing <code>&lt;CLIENT_INGESTION_AUTHKEY&gt;</code> with a  secure authentication key of your choosing (i.e. password). </p> <p>Record this value for later use.</p> <p>IMAGE</p> </li> <li> <p>Create the secret by running the following command within the same directory:</p> <p><code>oc apply -f client-ingestion-secret.yaml</code></p> </li> <li> <p>Lastly, modify the <code>wrapper-creds.yaml</code> file, replacing <code>&lt;WRAPPER_PASWORD&gt;</code> with a secure password credential. Record this value for later use as this is what you\u2019ll later use to configure your assistant and agent OpenSearch connection.</p> <p>IMAGE</p> </li> <li> <p>Create the secret by running the following command within the same directory:</p> <p><code>oc apply -f wrapper-creds.yaml</code></p> </li> </ol>"},{"location":"zAssistantDeploy/deploy-zAssistantDeploy/","title":"Deploy zAssistantDeploy service","text":""},{"location":"zAssistantDeploy/deploy-zAssistantDeploy/#deploy-zassistantdeploy-service-on-your-cluster","title":"Deploy zAssistantDeploy service on your cluster","text":"<p>In this step you will deploy zAssistantDeploy to your OpenShift cluster. zAssistantDeploy provides an OpenSearch deployment that is pre-installed with IBM Z documentation along with a data ingestion service that a customer can use to load their own documents to establish an internal knowledge base with their own internal processes and assets for quickly getting answers to. After deploying, you will later ingest some sample documents provided in this lab guide to show how the conversational search capability works with customer ingested documentation.</p> <ol> <li> <p>On your local command-line or Terminal window, obtain and record your cluster domain that is used for routes by running the following command:</p> <p><code>oc -n openshift-ingress-operator get ingresscontroller default -o jsonpath=\"{.status.domain}\"</code></p> <p>The output should return something similar to the following:</p> <p><code>apps.672b79320c7a71b728e523b4.ocp.techzone.ibm.com</code></p> <p>NOTE: the value outputted should not contain the \u2018%\u2019 character at the end. DO NOT copy this character when pasting the output in the following step.</p> </li> <li> <p>In your existing directory, there is a deploy-zad.yaml file. </p> <p>Modify this file in a text editor of your choice, substituting the domain name recorded in the previous step for the <code>&lt;YOUR_CLUSTER_DOMAIN&gt;</code> string.</p> <p></p> <p>Make sure to save the file before proceeding to the next step.</p> </li> <li> <p>Then deploy the zAssistantDeploy service by running the following command:</p> <p><code>oc apply -f deploy-zad.yaml</code></p> <p>After running the above command, the new pods will start initializing in your wxa4z-zad namespace. </p> </li> <li> <p>After running the previous command while the new pods are initializing, run the following command to disable the dashboard deployment as this is not required nor supported in the TechZone environment:</p> <p>Mac users:</p> <pre><code>oc -n wxa4z-zad patch zassistantdeploy zassistantdeploy --type='merge' - p='{\"spec\": {\"dashboard\": {\"enabled\": false}}}'\n</code></pre> <p>Windows users:</p> <pre><code>oc -n wxa4z-zad patch zassistantdeploy zassistantdeploy --type=\"merge\" - p=\"{\\\"spec\\\": {\\\"dashboard\\\": {\\\"enabled\\\": false}}}\"\n</code></pre> </li> <li> <p>Then run the following command to disable the assistantBootstrap feature:</p> <p>Mac users:</p> <pre><code>oc -n wxa4z-zad patch zassistantdeploy zassistantdeploy --type='merge' - p='{\"spec\": {\"assistantBootstrap\": {\"enabled\": false}}}'\n</code></pre> <p>Windows users:</p> <pre><code>oc -n wxa4z-zad patch zassistantdeploy zassistantdeploy --type=\"merge\" - p=\"{\\\"spec\\\": {\\\"assistantBootstrap\\\": {\\\"enabled\\\": false}}}\"\n</code></pre> </li> <li> <p>After following the above steps, the new pods will be created in your wxa4z-zad namespace. This process typically takes up to 15-20 minutes for the images to download and the deployment to complete.</p> <p>To view the progress of your pods creation, navigate back to your OpenShift web console. </p> <p>Then click on the Pods tab and select the wxa4z-zad project from the Projects drop-down within the OCP web console. </p> <p></p> <p>REMINDER: the deployment process may take 15-20 min or so to complete. Use this time to take a coffee break and proceed with the following section</p> </li> </ol>"},{"location":"zAssistantDeploy/install-cert-manager/","title":"Install IBM Certificate Manager","text":""},{"location":"zAssistantDeploy/install-cert-manager/#install-ibm-cert-manager-on-cluster","title":"Install IBM Cert Manager on cluster","text":"<ol> <li> <p>On your local command-line, apply the IBM Certificate Manager Operator in your OpenShift cluster by running the following command:</p> <p><code>oc apply -f catalogCertManager.yaml</code></p> <p>The preceding command should return a message that states the ibm-cert-manager-catalog was created.</p> </li> <li> <p>In the OpenShift web console, click Operators and then select OperatorHub.</p> <p>IMAGE</p> </li> <li> <p>Click the Project to pull-down menu and click the Show default projects toggle.</p> </li> </ol> <p>IMAGE</p> <ol> <li>Scroll down and select openshift-marketplace.</li> </ol> <p>IMAGE</p> <ol> <li> <p>Enter IBM Cert Manager in the search field and then click the IBM Cert Manager tile.</p> <p>Note:* it may take a minute or 2 for the IBM Cert Manager* tile to appear. Click on a different tab and go back to it to refresh.</p> <p>IMAGE</p> </li> <li> <p>Click Install.</p> <p>IMAGE</p> </li> <li> <p>Keep the default settings and click Install.</p> <p>IMAGE</p> <p>NOTE: the installation process takes a few minutes. DO NOT continue until you see the following message: <code>Installed operator: ready for use</code>.</p> <p>IMAGE</p> </li> </ol>"},{"location":"zAssistantDeploy/install-oc-utility/","title":"Install the oc CLI and log into OpenShift","text":""},{"location":"zAssistantDeploy/install-oc-utility/#install-the-oc-cli-and-log-into-openshift","title":"Install the <code>oc</code> CLI and log into OpenShift","text":""},{"location":"zAssistantDeploy/install-oc-utility/#install-the-oc-command-line-utility","title":"Install the <code>oc</code> command-line utility","text":"<p>The Red Hat OpenShift command line interface (CLI) utility, which is known as <code>oc</code>, must be installed on your local workstation. If you already installed the <code>oc</code> utility, you can proceed to the next section.</p> <p>This can be verified by issuing the <code>oc</code> command on your local command-line. If you already installed the <code>oc</code> utility, you can proceed to the next section.</p> <ol> <li> <p>Log into your Single Node OpenShift cluster via web console by following the instructions here.</p> </li> <li> <p>Click the Help icon and then click Command Line Tools.</p> <p>IMAGE</p> </li> <li> <p>Click the link under oc - OpenShift Command Line Interface (CLI) for the operating system of your local machine.</p> <p>IMAGE</p> <p>Clicking the preceding link automatically downloads either a .zip or .tar file specific to your operating system. Extract the file's content.</p> <p>Place the oc binary for your operating system (OS) in a directory that is in your default <code>PATH</code>, or set the <code>PATH</code> environment variable to include the location of the oc binary.</p> </li> <li> <p>Verify the installation by running the <code>oc</code> command on your local workstation. </p> <p><code>oc --help</code></p> <p>IMAGE</p> </li> </ol>"},{"location":"zAssistantDeploy/install-oc-utility/#log-into-your-openshift-cluster-from-your-local-terminal","title":"Log into your OpenShift cluster from your local terminal","text":"<p>Note: If you just installed the <code>oc</code> utility, you should already be logged into the cluster and can skip the first couple of steps.</p> <ol> <li> <p>Log into your Single Node OpenShift cluster via web console by <code>following the instructions in.....</code></p> </li> <li> <p>Click the <code>kube:admin</code> profile drop-down and click Copy login command.</p> <p>IMAGE</p> </li> <li> <p>Click Display Token.</p> <p>IMAGE</p> </li> <li> <p>Select and copy the Log in with this token string.</p> <p>For most operating systems, double-click the value, then right-click and select Copy**.</p> <p>IMAGE</p> </li> <li> <p>Open a command prompt or terminal window on your local workstation. Then paste the login command and press enter.</p> <p>IMAGE</p> </li> </ol>"},{"location":"zAssistantDeploy/install-oc-utility/#download-the-zassistantdeploy-configuration-folder","title":"Download the zAssistantDeploy configuration folder","text":"<p>In this step you will download a .zip file from Box containing the YAML files needed to deploy zAssistDeploy.</p> <ol> <li> <p>On your local workstation, click on this Box link to view the provided zAssistDeploy.zip file:</p> <p>https://ibm.box.com/s/idllzje6oqiy02fv4zodubn1m78szp5s</p> </li> <li> <p>Once you can view the file in Box, click Download to download the file to your local workstation.</p> <p>IMAGE</p> </li> <li> <p>Once downloaded, go to your local workstation\u2019s Downloads folder and extract/unzip the zAssistDeploy.zip file.</p> </li> <li> <p>You should then see the unzipped/extracted folder with the included YAML files as shown below (for Mac users):</p> <p>IMAGE</p> </li> <li> <p>On your local machine\u2019s command-line, change to the zAssistDeploy directory. On Mac, this can be done by issuing the following command:</p> <p><code>cd Downloads/zAssistDeploy</code></p> <p>Use the corresponding command for Windows users.</p> </li> <li> <p>Once you\u2019ve changed to the extracted zAssistDeploy directory via command-line, you should be able to list the contained files. Below is an example for Mac users:</p> <p>IMAGE</p> </li> </ol>"},{"location":"zAssistantDeploy/install-wxa4z-operator/","title":"Install the watsonx Assistant for Z Operator","text":""},{"location":"zAssistantDeploy/install-wxa4z-operator/#install-the-watsonx-assistant-for-z-operator","title":"Install the watsonx Assistant for Z Operator","text":"<p>In this step you will install the watsonx Assistant for Z operator to deploy and configure zAssistantDeploy on your cluster. First, you will need to deploy the catalog source using the provided YAML file.</p> <ol> <li> <p>In your local command prompt or terminal window, create 2 new namespaces called <code>wxa4z-operator</code> and <code>wxa4z-zad</code> in the cluster by issuing the following 2 commands in sequence:</p> <p><code>oc create namespace wxa4z-operator</code></p> <p><code>oc create namespace wxa4z-zad</code></p> </li> <li> <p>Next, you will need to create or obtain your IBM Container Software production entitlement key. This is required to pull the container images that get deployed by the operator.</p> <p>You can create or retrieve an entitlement key by accessing the Entitlement keys page here.</p> <p>If you don\u2019t have an entitlement key at the above link, click the Add new key to create a new one. </p> <p>If extra assistance is needed, refer to this site.</p> <p>Locate your existing key or create a new one and continue to the next step.</p> </li> <li> <p>Click copy and record your entitlement key for future use in a secure location.</p> <p>IMAGE</p> </li> <li> <p>In your command prompt or terminal window, set an environment variable with your production entitlement key.</p> <p>Substitute your production entitlement key copied in the last step for <code>&lt;entitlement key&gt;</code>.</p> <p>Mac users: </p><pre><code>export IBM_CS_ENT_KEY=&lt;entitlement key&gt;\n</code></pre> <p>Windows users: </p><pre><code>set IBM_CS_ENT_KEY=&lt;entitlement key&gt;\n</code></pre> </li> <li> <p>Enter the following command (depending on operating system) to create a pull secret for the Container Registry.</p> <p>Mac users: </p><pre><code>oc -n wxa4z-zad create secret docker-registry icr-pull-secret --docker- server=cp.icr.io --docker-username=cp --docker-password=$IBM_CS_ENT_KEY\n</code></pre> <p>Windows users: </p><pre><code>oc -n wxa4z-zad create secret docker-registry icr-pull-secret --docker- server=cp.icr.io --docker-username=cp --docker-password=%IBM_CS_ENT_KEY%\n</code></pre> <p>IMAGE</p> </li> <li> <p>Create your catalog source resource in your OpenShift cluster by running the following command:</p> <pre><code>oc apply -f catalogSource.yaml\n</code></pre> <p>IMAGE</p> </li> <li> <p>In the OpenShift web console, click OperatorHub, toggle off \u2018Show default projects\u2019, and then select the wxa4z-operator project.</p> <p>IMAGE</p> </li> <li> <p>Enter <code>ibm watsonx</code> in the search field and then click the IBM watsonx Assistant for Z Operator Catalog tile.</p> <p>Note: it may take a minute or 2 for the tile to appear. Click on a different tab and go back to it to refresh.</p> <p>IMAGE</p> </li> <li> <p>Click Install.</p> <p>Note: the current version of the operator may differ than what\u2019s shown in the image below.</p> <p>IMAGE</p> </li> <li> <p>Select A specific namespace on the cluster (a) under Installation mode and wxa4z-operator (b) for the Installed Namespace, then click Install (c).</p> <p>IMAGE</p> <p>NOTE: the installation process may take a few minutes. DO NOT CONTINUE until you see the following message: <code>Installed operator: ready for use.</code></p> <p>IMAGE</p> </li> <li> <p>In the OpenShift web console, under Workloads, click Pods.</p> <p>IMAGE</p> </li> <li> <p>Verify the two pods that start with ibm-wxa4z-operator have a status of Running and that all pods are Ready.</p> <p>IMAGE</p> </li> </ol>"},{"location":"zAssistantDeploy/install-wxa4z-operator/#update-the-operator-group","title":"Update the Operator Group","text":"<p>After the installation is completed, update the operator group targeting the namepsaces where you will deploy the zAssistantDeploy resources.</p> <ol> <li> <p>First, run the following command to retrieve the unique name of your operator group:</p> <pre><code>oc -n wxa4z-operator get operatorgroup\n</code></pre> <p>The output should contain a single operator group as shown in the following example:</p> <p>IMAGE</p> <p>NOTE: record the outputted operatorgroup value as you will need it in the following step.</p> </li> <li> <p>Finally, run the following command (depending on operating system) to update the list of targeted namespaces, where <code>&lt;operatorgroup-name&gt;</code> is substituted with your unique operatorgroup name recorded in the previous step.</p> <p>Mac users: </p><pre><code>oc -n wxa4z-operator patch operatorgroup &lt;operatorgroup-name&gt; --type=merge -p '{\"spec\": {\"targetNamespaces\": [\"wxa4z-zad\"]}}'\n</code></pre> <p>Windows users: </p><pre><code>oc -n wxa4z-operator patch operatorgroup &lt;operatorgroup-name&gt; --type=merge -p \"{\\\"spec\\\": {\\\"targetNamespaces\\\": [\\\"wxa4z-zad\\\"]}}\"\n</code></pre> </li> <li> <p>If done successfully, you should see output returned like the following:</p> </li> </ol> <p><code>operatorgroup.operators.coreos.com/wxa4z-operator-fbtjx patched</code></p>"},{"location":"zAssistantDeploy/verify-deployment/","title":"Verify deployment and acquire OpenSearch connection details","text":""},{"location":"zAssistantDeploy/verify-deployment/#verify-deployment-and-acquire-opensearch-connection-details","title":"Verify deployment and acquire OpenSearch connection details","text":"<p>In this section you will verify the successful deployment of your zAssistDeploy service and gather the OpenSearch credentials needed to configure an assistant with conversational search for Q&amp;A.</p> <ol> <li> <p>Before proceeding, ensure that all pods in your wxa4z-zad namespace have a status of Running or Completed, as shown below:</p> <p></p> </li> <li> <p>Under Networking, click Routes.</p> <p></p> </li> <li> <p>Copy and record the location of the wxa4z-opensearch-wrapper route.</p> <p></p> <p>IMPORTANT: Ensure you copy this URL to a notepad and saved for later as this value will be used frequently throughout the rest of the Lab.</p> </li> <li> <p>Once copied to a local notepad, append the string <code>/v1/query</code> to the end of the URL to complete the URL endpoint.</p> <p>The URL should look similar to:</p> <pre><code>https://wxa4z-opensearch-wrapper-wxa4z-zad.apps.68b1c328e1b1c3e282ce4781.eu1.techzone.ibm.com/v1/query\n</code></pre> <p>NOTE: the above URL will not work for you. Use the value of your specific OpenSearch instance.</p> </li> <li> <p>The final URL (with the appended string at the end) should be recorded in your notepad and labeled <code>WRAPPER_URL</code>. In later instructions, this value will be referred to as your \u2018<code>WRAPPER_URL</code>\u2019. Whenever you\u2019re prompted for it, you can retrieve this URL value from your local notepad.</p> </li> <li> <p>Finally, the last thing you\u2019ll need is your OpenSearch Wrapper Password. This is the value you added to your local <code>wrapper_creds.yaml</code> file, substituted for :</p> <p></p> </li> <li> <p>Copy and record this password value to the same notepad, labelling it as your <code>WRAPPER_PASSWORD</code>.</p> <p>You will also be prompted for this value throughout the rest of the Lab. So ensure it\u2019s recorded in your notepad for later use.</p> </li> </ol>"},{"location":"zRAG-Assistant/Overview/","title":"Overview","text":""},{"location":"zRAG-Assistant/Overview/#overview-creating-a-zrag-assistant","title":"Overview - Creating a zRAG Assistant","text":"<p>IBM watsonx Assistant for Z allows you to create and configure assistants with conversational search capabilities. Assistants can be configured to use conversational search against the zRAG containing a wide array of IBM Z documentation which comes by default with the zAssistDeploy service you deployed in the previous section.</p> <p>The OpenSearch instance you deployed boasts over 220 knowledge sources and supports Retrieval Augmented Generation (RAG). In addition, the Large Language Model (LLM) providing conversational AI augments this knowledge based on IBM Z documentation, generating IBM Z context-aware responses to queries with content- grounded knowledge.</p> <p>Clients can even personalize their assistant with an internal knowledge base that contains internal documentation they can add to the zRAG. This helps provide a level of context-awareness of their own enlivenment when environment-specific questions are asked to the assistant. You\u2019ll see how that is possible later on in this Lab.</p> <p>A high-level, logical architecture diagram of the environment you will be using is illustrated below:</p> <p></p> <p>In this section of the Lab, you will create a new assistant that is intended to provide accurate and reliable answers to a range of Z related questions, leveraging the content-grounded search capabilities provided with your previously deployed OpenSearch instance. The tasks involved include:</p> <ul> <li>Accessing your watsonx Orchestrate environment and creating a new zRAG Assistant </li> <li>Configuring conversational search via your OpenSearch credentials for Q&amp;A </li> <li>Adjusting settings for conversational search<ul> <li>Contextual awareness</li> <li>Confidence thresholds</li> <li>Response lengths</li> <li>Metadata filtering</li> </ul> </li> <li>Fine-tuning the assistant behavior with Prompt Instructions </li> <li>Verifying the assistant\u2019s Q&amp;A</li> </ul>"},{"location":"zRAG-Assistant/access-wxo/","title":"Access watsonx Orchestrate","text":"<p>test</p>"},{"location":"zRAG-Assistant/additional-config/","title":"Additional configuration","text":""},{"location":"zRAG-Assistant/additional-config/#additional-configuration","title":"Additional configuration","text":"<p>After you save and close the Conversational search configuration page, a few more configurations are needed to get the best experience from your conversational chat. Details on these settings are available here.</p> <ol> <li> <p>Hover your cursor over the left-side navigation and click Actions.</p> <p>IMAGE</p> </li> <li> <p>Click Set by assistant under the All items menu.</p> <p>IMAGE</p> </li> <li> <p>Select No matches. </p> <p>IMAGE</p> </li> <li> <p>Under Conversation steps, select the first step and do the following:</p> <p>a. In the Is taken drop-down, select Without conditions. In the Clear conditions? Dialog box, click Clear conditions.</p> <p>b. In the Assistant says text box, delete the default text.</p> <p>c. In the And then drop-down, select Search for the answer.</p> <p>d. At the bottom of the page, click Edit settings, select the After generation tab, and then click the End the action after this step checkbox.</p> <p>e. Then click Apply.</p> <p>The configuration of Step 1 should look like the following:</p> <p>IMAGE</p> </li> <li> <p>Then click on the 2nd step of the No matches action and click on the Delete icon to delete the step.</p> <p>IMAGE</p> </li> <li> <p>Save the settings and close the window. </p> <p>IMAGE</p> </li> <li> <p>Then click the Fallback action in the Actions table.</p> <p>IMAGE</p> </li> <li> <p>Delete all of the Conversation steps except for the last one (Step 6).</p> <p>Note: You need to select each step individually. Click the delete icon and confirm the deletion for the first 5 steps.</p> <p>IMAGE</p> </li> <li> <p>Verify that the first 5 Conversation steps are deleted and then click the x to close the Editor window.</p> <p>IMAGE</p> </li> <li> <p>Click the Global settings icon.</p> <p>IMAGE</p> </li> <li> <p>Click No matches under the Conversation routing tab.</p> <p>IMAGE</p> </li> <li> <p>Move the slider to More often. </p> <p>IMAGE</p> </li> <li> <p>Then click the Autocorrection tab and toggle the feature to the Off position.</p> <p>IMAGE</p> </li> <li> <p>Click Save (a) and then Close (b). </p> <p>IMAGE</p> </li> <li> <p>Hover over the left-side navigation and click Environments.</p> <p>IMAGE</p> </li> <li> <p>Click Web chat. </p> <p>IMAGE</p> </li> <li> <p>On the Style tab, click the Streaming toggle to enable streaming.</p> <p>The streaming setting allows responses to be streamed to the assistant and displayed as they are generated versus waiting until the full response is received and then displayed.</p> <p>IMAGE</p> </li> <li> <p>Click on the Home screen tab. </p> <p>Customize the Home screen by setting a custom Greeting message and deleting the default Conversation starters.</p> <p>IMAGE</p> </li> <li> <p>Click the Suggestions tab and toggle the feature to the Off position.</p> <p>IMAGE</p> </li> <li> <p>Finally, click Save and exit (a) and then Close (b).</p> <p>IMAGE</p> </li> <li> <p>Lastly, you will add prompt instructions to your assistant to configure how the LLM responds to queries. The prompt instructions help LLMs to guide the conversations with clarity and specificity to achieve the end goal of an action. You can provide instructions to customize the output to an expert or a novice, to answer with a more structured output, such as bullets or examples, as applicable.</p> <p>Hover over the left-side navigation and click on Generative AI.</p> <p>IMAGE</p> </li> <li> <p>Click Add instructions. </p> <p>IMAGE</p> </li> <li> <p>In the Add prompt instructions text box, copy and paste the following example:</p> <pre><code>You are a subject matter expert on mainframe systems. Respond to all prompts with truth and accuracy. Provide answers in a bulleted list with headings. Provide examples and commands when requested. DO NOT guess the answer.\n</code></pre> <p>IMAGE</p> <p>NOTE: Prompt instructions are highly customizable and should be tested prior to delivering a demo or pilot. The provided prompt instructions above are just one example.</p> </li> </ol>"},{"location":"zRAG-Assistant/configure-settings/","title":"Configure settings for conv search","text":""},{"location":"zRAG-Assistant/configure-settings/#configure-settings-for-conversational-search","title":"Configure settings for conversational search","text":"<p>After enabling conversational search by connecting your OpenSearch instance to the assistant, you\u2019ll see additional settings that can be modified for fine-tuning how your assistant responds to questions. These settings can be updated based on your requirements. For example:</p> <ul> <li> <p>Contextual awareness</p> <p>Options include Single turn and Entire conversation.</p> <p>Single turn is best for contexts that require only current input to retrieve search results and to generate answers. The assistant answers each question individually without building a context from previous questions and answers.</p> <p>Entire conversation is used for context-dependent questions, which often considers previous inputs. </p> <p>NOTE: Entire conversation uses the whole session to continue the conversation. It may bring back subjects that are no longer in the scope of the conversation. Therefore, irrelevant context may yield suboptimal results. When conversing with the AI Assistant, if there is a query that is not related to the current subject, it is recommended to restart the conversation and then type the query for more accurate results.</p> </li> <li> <p>Define the text for the citations title</p> <p>Specify the text that appears to instruct the user to expand the list of citations in the assistant (except web chat client). The Default is <code>How do we know?</code></p> </li> <li> <p>Tendency to say <code>I don't know</code></p> <p>Used to tune the tendency of your assistant to say \u201cI don\u2019t know\u201d in conversational search. Options include:</p> <ul> <li>Rarely</li> <li>Less often</li> <li>More often</li> <li>Most often</li> </ul> <p>By default, Less often is selected, although the recommended option is Rarely, which allows the Assistant to provide a general answer to a query. However, if there are more incorrect answers than expected, you can raise the threshold to Less often.</p> <p>You can select the other options such as More often and Most often, as required. However, this increases the frequency of \u201cI don\u2019t know\u201d responses.</p> </li> <li> <p>Generated response length</p> <p>The generated response-length feature customizes response lengths to best meet your needs. Options include:</p> <ul> <li>Concise</li> <li>Moderate</li> <li>Verbose</li> </ul> <p>This will adjust the length of responses that your assistant gives to better fit your needs in conversational search. The default setting is Moderate, but Verbose has performed well in testing for Q&amp;A.</p> <p>Learn more about tuning this setting here.</p> </li> <li> <p>Default filter</p> <p>The Default filter field allows you to include or exclude specific products from your conversational search. For more details on how to set this filter as well as the full list of products that can be included or excluded, see step 10 here.</p> </li> <li> <p>Metadata</p> <p>The Metadata field provides a way to adjust your assistant\u2019s behavior during conversational search for your OpenSearch instance. You can specify which topics or document indicies are referenced in its content-grounded search. If you leave the metadata field empty, then it defaults to settings found to perform well. For example, OpenSearch searches all the default IBM-provided documentation and all of the ingested customer documentation with an equal weighting.</p> <p>As an example, the doc_weight parameter defines the weight distribution between IBM documents and customer documents. For example, if you provide the value 0.2 for product_docs and 0.8 for customer_docs, then the data search in customer documents is prioritized over product documents.</p> <p>For more details on the ways to configure the Metadata field, reference the documentation in Step 11 here.</p> </li> <li> <p>Search display text</p> <p>The Search display text options speicy the default text displayed when no results are found or when connectivity issues to the backend search service occur. The defaults are usually sufficient.</p> </li> </ul> <p>For more details on the conversational search settings, reference the IBM Docs page here.</p> <ol> <li> <p>For the initial configuration of your AI assistant with the default zRAG documentation, set Contextual awareness to Single turn.</p> <p></p> </li> <li> <p>For the Tendency to say \u201cI don\u2019t know\u201d option, select the recommended option of Rarely.</p> <p></p> </li> <li> <p>For the Generated response length option, select Verbose.</p> <p></p> </li> <li> <p>In the Metadata field text box, copy and paste the following:</p> <pre><code>{\"doc_weight\":\n{\"product_docs\":0.5,\n\"customer_docs\":0.5}, \"ibm_indices\":\"*_ibm_docs_slate,*_ibm_redbooks_slate\", \"standardize\":true,\n\"customer_indices\":\"customer_*\"\n}\n</code></pre> <p>NOTE:* this is the default* setting and won\u2019t change the behavior of the conversational search. The result is weight product docs and customer ingested docs equally. Later in this Lab you will modify this field to prioritize customer ingested docs.</p> <p></p> </li> <li> <p>Leave all other defaults and click Save.</p> <p></p> </li> <li> <p>Finaly, click Close. </p> </li> </ol>"},{"location":"zRAG-Assistant/create-assistant/","title":"Create a zRAG Assistant","text":""},{"location":"zRAG-Assistant/create-assistant/#create-a-zrag-assistant","title":"Create a zRAG Assistant","text":"<p>In this section, you will create an assistant for the purpose of answering questions to a range of IBM Z related questions.</p> <ol> <li> <p>Once logged into the watsonx Orchestrate UI, click on the \u2018hamburger\u2019 menu icon in the top-left corner and click on Build --&gt; Assistant Builder.</p> <p></p> </li> <li> <p>Enter a name and optional description for your assistant, and click Next.</p> <p></p> </li> <li> <p>Complete the Personalize your assistant form and click Next.</p> <p>a. Select Web. </p> <p>b. Select the industry of your choice</p> <p>c. Select the role of your choice</p> <p>d. Select the need of your choice</p> <p></p> </li> <li> <p>Complete the Customize your chat UI form and click Next.</p> <p>For best results, toggle the Streaming option to On**. </p> <p></p> </li> <li> <p>Preview your assistant and then click Create. </p> <p></p> </li> <li> <p>The assistant is now created.</p> <p></p> </li> </ol>"},{"location":"zRAG-Assistant/setup-conv-search/","title":"Setup conversational search","text":""},{"location":"zRAG-Assistant/setup-conv-search/#setup-conversational-search","title":"Setup Conversational Search","text":"<p>In this step, you will configure conversational search for your assistant with the OpenSearch instance you previously deployed. Exposing the zRAG database to your assistant will augment it with content-grounded knowledge for helping to answer a range of IBM Z related questions.</p> <ol> <li> <p>In the Assistant Builder view, hover your cursor over the left-side of the screen to reveal the side-bar and click the Generative AI menu item.</p> <p></p> </li> <li> <p>Under the Answer behavior section, click Set up your Search integration.</p> <p></p> <p>Note: By default, conversational search is not enabled when an assistant is created.</p> </li> <li> <p>Click Customer service. </p> <p></p> </li> <li> <p>Complete the Custom service (a-e) form and then click Next (f).</p> <p>a. Select By providing credentials. </p> <p>b. Copy and paste your unique <code>WRAPPER_URL</code> value that you recorded in Section Verify deployment and acquire OpenSearch connection details.</p> <p>c. Select Basic authentication in the drop-down list.</p> <p>d. Enter <code>admin</code> in the Username field. </p> <p>e. Copy and paste your <code>WRAPPER_PASSWORD</code> value that you recorded in Section Verify deployment and acquire OpenSearch connection details.</p> <p></p> </li> <li> <p>Enable conversational search and then click Next. </p> <p></p> </li> </ol>"},{"location":"zRAG-Assistant/testing-conv-search/","title":"Testing assistant's conv search capbilities","text":""},{"location":"zRAG-Assistant/testing-conv-search/#testing-conversational-search-with-zrag-connection","title":"Testing conversational search with zRAG connection","text":"<p>Now you can begin issuing queries to test the assistant\u2019s responses. For more detailed responses, try appending <code>Please provide a detailed response</code> to the end of your question.</p> <p>Important: Modify settings iteratively based on your assessment of response quality. Review and change them at any time. For example, add extra prompt instructions, change response verbosity, and modify OpenSearch indexes.</p> <ol> <li> <p>Hover your cursor over the left-side navigation and click Preview. </p> <p></p> </li> <li> <p>In the Preview assistant screen, click Change layout at the top and then select Fullscreen -&gt; Save to make the chat window full screen.</p> <p></p> </li> <li> <p>Experiment with different prompts and validate that the answers are reasonable and related to IBM Z.</p> <p>Other prompts and responses follow.</p> <p>Note: The responses that you receive can vary from the ones shown.</p> <p>Prompt: </p><pre><code>What is the APF list in z/OS?\n</code></pre> <p>Example output: </p> <p>Prompt: </p><pre><code>Why is Db2 different than other database systems?\n</code></pre> <p>Example output: </p> <p>Prompt: </p><pre><code>What is the latest version of Db2 for z/OS?\n</code></pre> <p>Example output: </p> <p>Prompt: </p><pre><code>What is the operator command used to check the Db2 for z/OS version level?\n</code></pre> <p>Example output: </p> <p>Prompt: </p><pre><code>What happens during an IPL on IBM Z?\n</code></pre> <p>Example output: </p> </li> <li> <p>Experiment with the Multi-turn Q&amp;A capability by changing your custom service contextual awareness setting from Single turn to Entire conversation.</p> <p></p> </li> <li> <p>Go back to the Preview chat to test sequential prompts like those shown below. </p> <p>NOTE: make sure to restart the conversation after enabling multi-turn.</p> <p>Prompts:</p> <p></p><pre><code>What is the APF list in z/OS?\n</code></pre> <pre><code>How do you add a library to it?\n</code></pre> <pre><code>Show me how if my library is PROD1.LOADLIB on volume PRD001.\n</code></pre> </li> </ol> <p>You have now created and deployed your own assistant with conversational search capabilities, and your client can understand how watsonx Assistant for Z provides its content-grounded responses to any Z-related questions. This was done by configuring your assistant to use the zRAG that has over 220 knowledge sources, and uses this knowledge to provide AI-generated responses.</p> <p>In the following section, you will demonstrate how clients can personalize their assistant with an internal knowledge base that contains documentation they add to the RAG. This will provide a level of context- awareness of their own internal processes and procedures when company-specific questions are asked to the assistant.</p>"}]}